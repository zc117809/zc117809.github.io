<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Simple</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-08T14:59:54.569Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Simple</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>django-csrf 跨站请求伪造</title>
    <link href="http://yoursite.com/2020/07/09/django-csrf%20%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/"/>
    <id>http://yoursite.com/2020/07/09/django-csrf%20%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</id>
    <published>2020-07-09T14:00:21.116Z</published>
    <updated>2020-06-08T14:59:54.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="csrf-跨站请求伪造"><a href="#csrf-跨站请求伪造" class="headerlink" title="csrf 跨站请求伪造"></a>csrf 跨站请求伪造</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性</p><p>可以这样来理解：<br>    <strong><em>攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的</em></strong>，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户</p><h3 id="csrf-攻击原理"><a href="#csrf-攻击原理" class="headerlink" title="csrf 攻击原理"></a>csrf 攻击原理</h3><h3 id="crsf应用"><a href="#crsf应用" class="headerlink" title="crsf应用"></a>crsf应用</h3><p><strong>form表单里应用</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;p&gt;username:&lt;input type="text" name="username"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;target_user:&lt;input type="text" name="target_user"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;money:&lt;input type="text" name="money"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>在ajax应用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ajax如何符合校验</span></span><br><span class="line">// 第一种 利用标签查找获取页面上的随机字符串</span><br><span class="line">&#123;<span class="comment">#data:&#123;"username":'jason','csrfmiddlewaretoken':$('[name=csrfmiddlewaretoken]').val()&#125;,#&#125;</span></span><br><span class="line">// 第二种 利用模版语法提供的快捷书写</span><br><span class="line">&#123;<span class="comment">#data:&#123;"username":'jason','csrfmiddlewaretoken':'&#123;&#123; csrf_token &#125;&#125;'&#125;,#&#125;</span></span><br><span class="line">// 第三种 通用方式直接拷贝js代码并应用到自己的html页面上即可</span><br><span class="line">data:&#123;<span class="string">"username"</span>:<span class="string">'jason'</span>&#125;</span><br></pre></td></tr></table></figure><p>第三种方式的js代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function getCookie(name) &#123;</span><br><span class="line">    var cookieValue = null;</span><br><span class="line">    <span class="keyword">if</span> (document.cookie &amp;&amp; document.cookie !== <span class="string">''</span>) &#123;</span><br><span class="line">        var cookies = document.cookie.split(<span class="string">';'</span>);</span><br><span class="line">        <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</span><br><span class="line">            var cookie = jQuery.trim(cookies[i]);</span><br><span class="line">            // Does this cookie string begin with the name we want?</span><br><span class="line">            <span class="keyword">if</span> (cookie.substring(<span class="number">0</span>, name.length + <span class="number">1</span>) === (name + <span class="string">'='</span>)) &#123;</span><br><span class="line">                cookieValue = decodeURIComponent(cookie.substring(name.length + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cookieValue;</span><br><span class="line">&#125;</span><br><span class="line">var csrftoken = getCookie(<span class="string">'csrftoken'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function csrfSafeMethod(method) &#123;</span><br><span class="line">  // these HTTP methods do <span class="keyword">not</span> require CSRF protection</span><br><span class="line">  <span class="keyword">return</span> (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">  beforeSend: function (xhr, settings) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!csrfSafeMethod(settings.type) &amp;&amp; !this.crossDomain) &#123;</span><br><span class="line">      xhr.setRequestHeader(<span class="string">"X-CSRFToken"</span>, csrftoken);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="csrf-相关装饰器"><a href="#csrf-相关装饰器" class="headerlink" title="csrf 相关装饰器"></a>csrf 相关装饰器</h3><p>全站禁用：注释掉中间件 ‘django.middleware.csrf.CsrfViewMiddleware’,</p><p><strong>FBV使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt,csrf_protect</span><br><span class="line"><span class="comment"># 不注释csrf，让整体通过csrf，（忽视校验）</span></span><br><span class="line"><span class="comment"># @csrf_exempt</span></span><br><span class="line"><span class="comment"># 注释掉csrf，整体不校验，这个函数需要校验（需要校验）</span></span><br><span class="line"><span class="comment"># @csrf_protect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        target_user = request.POST.get(<span class="string">'target_user'</span>)</span><br><span class="line">        money = request.POST.get(<span class="string">'money'</span>)</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;username&#125;</span> 向<span class="subst">&#123;target_user&#125;</span> 转了<span class="subst">&#123;money&#125;</span>元'</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>)</span><br></pre></td></tr></table></figure><p><strong>CBV使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_protect,csrf_exempt</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="comment"># 注释掉csrf</span></span><br><span class="line"><span class="comment"># @method_decorator(csrf_protect,name='post') # 针对csrf_protect第二种 可以需要校验</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCsrf</span><span class="params">(View)</span>:</span></span><br><span class="line"><span class="meta">    @method_decorator(csrf_protect)# 针对csrf_protect第三种 可以需要校验</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super(MyCsrf,self).dispatch(request,*args,**kwargs)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'get'</span>)</span><br><span class="line">    <span class="comment"># @method_decorator(csrf_protect) # 针对csrf_protect第一种 可以需要校验</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span>  HttpResponse(<span class="string">'post'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不注释csrf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#@method_decorator(csrf_exempt,name='post')# 第二种针对csrf_exempt,想忽略全局校验 还是需要校验</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCsrf</span><span class="params">(View)</span>:</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment"># @method_decorator(csrf_exempt) # 第三种针对csrf_exempt,想忽略全局校验 可以不需要</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super(MyCsrf,self).dispatch(request,*args,**kwargs)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'get'</span>)</span><br><span class="line">  </span><br><span class="line">    <span class="comment"># @method_decorator(csrf_exempt) # 第一种针对csrf_exempt,想忽略全局校验 还是需要校验</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span>  HttpResponse(<span class="string">'post'</span>)</span><br></pre></td></tr></table></figure><p>针对不注释掉csrf的，第三种可以忽略校验，但是一和二不行，还是需要校验</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;csrf-跨站请求伪造&quot;&gt;&lt;a href=&quot;#csrf-跨站请求伪造&quot; class=&quot;headerlink&quot; title=&quot;csrf 跨站请求伪造&quot;&gt;&lt;/a&gt;csrf 跨站请求伪造&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;head
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>前端之CSS</title>
    <link href="http://yoursite.com/2020/07/09/%E5%89%8D%E7%AB%AF%E4%B9%8BCSS/"/>
    <id>http://yoursite.com/2020/07/09/%E5%89%8D%E7%AB%AF%E4%B9%8BCSS/</id>
    <published>2020-07-09T14:00:04.208Z</published>
    <updated>2020-07-09T14:17:41.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端之CSS"><a href="#前端之CSS" class="headerlink" title="前端之CSS"></a>前端之CSS</h1><p>CSS是层叠样式表，就是给html标签添加样式，让其更美观</p><p><strong>CSS的注释</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*单行注释*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释1</span></span><br><span class="line"><span class="comment">多行注释2</span></span><br><span class="line"><span class="comment">多行注释3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># 通常我们在写<span class="selector-tag">css</span>样式的时候也会用注释来划定样式区域(因为<span class="selector-tag">HTML</span>代码多所以对呀的<span class="selector-tag">css</span>代码也会很多)</span><br></pre></td></tr></table></figure><p><strong>CSS语法结构</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">  属性1:值1;</span><br><span class="line">  属性2:值2;</span><br><span class="line">  属性3:值3;</span><br><span class="line">  属性4:值4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CSS的三种引入方式</strong></p><ul><li><p>style标签直接书写css代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">h1</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: burlywood;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>link标签引入外部css文件，正规</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel="stylesheet" href="mycss.css"&gt;</span><br></pre></td></tr></table></figure></li><li><p>行内式，直接html标签内书写样式，一般不推荐</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 style="color: green"&gt;老板好 要上课吗?&lt;/h1&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><p>所谓选择器，就是确定标签位置的方法</p><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d1"</span> <span class="attr">class</span>=<span class="string">"c1 c2"</span>&gt;</span>div</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>div里面的p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>div里面的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"d2"</span> <span class="attr">class</span>=<span class="string">"c1 c2"</span>&gt;</span>ppp<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"d3"</span> <span class="attr">class</span>=<span class="string">"c2"</span>&gt;</span>span111<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"d4"</span> <span class="attr">class</span>=<span class="string">"c3"</span>&gt;</span>span222<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>id选择器</strong>，根据id值确定一个标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#id_name</span>&#123; <span class="comment">/*找到id是d1的标签 将文本颜色变成红色*/</span></span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>class选择器</strong>，根据class值确定一类标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class_name</span>&#123; <span class="comment">/* 找到class值里面包含c1的标签*/</span></span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>元素/标签选择器</strong>，根据标签名确定一堆span标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span>&#123;<span class="comment">/*找到所有的span标签*/</span></span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>通用选择器</strong>，选择所有标签</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*&#123;<span class="comment">/*将html页面上所有的标签全部找到*/</span></span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>div</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>div p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>div p</span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>div p span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>ppp<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">"""</span><br><span class="line">在前端 我们将标签的嵌套用亲戚关系来表述层级</span><br><span class="line">&lt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">div</span></span><br><span class="line">        &lt;p&gt;div p&lt;/p&gt;</span><br><span class="line">        &lt;<span class="selector-tag">p</span>&gt;<span class="selector-tag">div</span> <span class="selector-tag">p</span></span><br><span class="line">            &lt;span&gt;div p span&lt;/span&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;span&gt;span&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;span&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  <span class="selector-tag">div</span>里面的<span class="selector-tag">p</span> <span class="selector-tag">span</span>都是<span class="selector-tag">div</span>的后代</span><br><span class="line">  <span class="selector-tag">p</span>是<span class="selector-tag">div</span>的儿子</span><br><span class="line">  <span class="selector-tag">p</span>里面的<span class="selector-tag">span</span>是<span class="selector-tag">p</span>的儿子 是<span class="selector-tag">div</span>的孙子</span><br><span class="line">  <span class="selector-tag">div</span>是<span class="selector-tag">p</span>的父亲</span><br><span class="line">  ...</span><br><span class="line">"""</span><br></pre></td></tr></table></figure><ul><li><p><strong>后代选择器，空格隔开</strong>，选择div 里面的所有span</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>儿子选择器，&gt;连接</strong>，选择内部第一层的所有span</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>毗邻选择器，+连接</strong>，选择div同级别的紧挨着的下面一个span，隔着一个都不行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>+<span class="selector-tag">span</span>&#123; <span class="comment">/*同级别紧挨着的下面的第一个*/</span></span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>弟弟选择器，~连接</strong>，选择同级别下面所有的span</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>~<span class="selector-tag">span</span>&#123;<span class="comment">/*同级别下面所有的span*/</span></span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>属性选择器，以<code>[]</code>作为标志。    </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;input type="text" username&gt;</span><br><span class="line">    &lt;input type="text" username="jason"&gt;</span><br><span class="line">    &lt;input type="text" username="kevin"&gt;</span><br><span class="line">    &lt;p username="tank"&gt;水箱老师&lt;/p&gt;</span><br><span class="line">    &lt;div username="egon"&gt;矮子老师&lt;/div&gt;</span><br><span class="line">    &lt;span username="jason"&gt;jason老师 &lt;/span&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ul><li><p>含有某个属性的标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[username]</span>&#123; <span class="comment">/*将所有含有属性名是username的标签背景色改为红色*/</span></span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>含有某个属性且有某个值的标签，选择属性名为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[username=<span class="string">'jason'</span>]</span>&#123; <span class="comment">/*找到所有属性名是username并且属性值是jason的标签*/</span></span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>含有某个属性且有某个值的某个标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[username=<span class="string">'jason'</span>]</span>&#123;<span class="comment">/*找到所有属性名是username并且属性值是jason的input标签*/</span></span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端之CSS&quot;&gt;&lt;a href=&quot;#前端之CSS&quot; class=&quot;headerlink&quot; title=&quot;前端之CSS&quot;&gt;&lt;/a&gt;前端之CSS&lt;/h1&gt;&lt;p&gt;CSS是层叠样式表，就是给html标签添加样式，让其更美观&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSS的注释&lt;/s
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>django-cookie 和session</title>
    <link href="http://yoursite.com/2020/07/09/django-cookie%20%E5%92%8Csession/"/>
    <id>http://yoursite.com/2020/07/09/django-cookie%20%E5%92%8Csession/</id>
    <published>2020-07-09T13:57:51.174Z</published>
    <updated>2020-06-07T06:56:17.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cookie-和session"><a href="#cookie-和session" class="headerlink" title="cookie 和session"></a>cookie 和session</h2><p>HTTP协议是无状态的，这意味这所有的客户端或者浏览器朝服务端发请求，服务端是不会记住客户端是谁，没办法保存用户的登录信息。</p><p>随之WEB的发展，出现了网上商城之类购物网站，这类网站的一个需求是记住当前用户是谁，并且需要记住用户的登录状态（避免每次请求页面都重新登录）。</p><p>为了解决这个需求，出现了很多总解决办法。其中最有效的一个办法是：当用户第一次登录成功后，将用户的登录信息（用户名和密码）返回给用户的浏览器，让浏览器将<strong>登录信息保存在本地浏览器(cookie)</strong>；之后用户再次访问该网站时，浏览器会携带之前保存的该网站的登录信息，这样服务端获取登录信息之后自动登录验证。</p><p>但是这种方式存在很大的安全隐患：容易泄露用户的登录信息；后来又出现了优化的解决办法。</p><p>新的解决办法是：当用户初次登录成功后，服务端会产生一个随机字符串，该<strong>字符串保存在服务端(session)</strong>，保存成键值对的形式。同时将该字符串交由客户端浏览器保存。之后再访问服务端的时候，浏览器都会带着这个随机字符串，服务端去数据库中匹配是否又这个随机字符串对应的用户信息；匹配成功则自动登录。</p><p>其实，如果截获到该随机字符串，那么就可以冒充当前用户，其实还是有安全隐患的。所以应了那句话：<strong>在web领域没有绝对的安全也没有绝对的不安全</strong>。</p><p>这就是cookie和session的出现历程。</p><ul><li><code>cookie</code>：服务端保存在客户端浏览器上的信息，它的表现形式一般都是k:v键值对(可以有多个)。<strong>cookie就是保存在客户端浏览器上的信息</strong></li><li><code>session</code>：数据是保存在服务端的并且它的表现形式一般也是k:v键值对(可以有多个)。<strong>session就是保存在服务端上的信息</strong></li><li>session是基于cookie工作的(其实大部分的保存用户状态的操作都需要使用到cookie)。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">token</span><br><span class="line">session虽然数据是保存在服务端的 但是禁不住数据量大</span><br><span class="line">    服务端不再保存数据</span><br><span class="line">    登陆成功之后 将一段用户信息进行加密处理(加密算法之后你公司开发知道)</span><br><span class="line">    将加密之后的结果拼接在信息后面 整体返回给浏览器保存 </span><br><span class="line">    浏览器下次访问的时候带着该信息 服务端自动切去前面一段信息再次使用自己的加密算法</span><br><span class="line">    跟浏览器尾部的密文进行比对</span><br></pre></td></tr></table></figure><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><h3 id="cookie基本操作"><a href="#cookie基本操作" class="headerlink" title="cookie基本操作"></a>cookie基本操作</h3><p>虽然cookie是服务端告诉客户端浏览器需要保存内容，但是客户端浏览器可以选择拒绝保存；如果将浏览器设置为禁止保存服务端的cookie，那么只要是需要记录用户状态的网站登陆功能都无法使用了。</p><p>视图函数的返回有三种形式，HttpResponse  ，render , redirect 三种形式 其实本质上内部返回的都是HttpResponse  对象，我们可以直接返回也是先将对象用一个变量保存下来在返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">方式一</span><br><span class="line"><span class="keyword">return</span> HttpResponse()</span><br><span class="line"><span class="keyword">return</span> render()</span><br><span class="line"><span class="keyword">return</span> direct()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方式<span class="number">2</span></span><br><span class="line">obj1 = HttpResponse()</span><br><span class="line"><span class="keyword">return</span> obj1</span><br><span class="line"> </span><br><span class="line">obj2 = render()</span><br><span class="line"><span class="keyword">return</span> obj2</span><br><span class="line"> </span><br><span class="line">obj3 = redirect()</span><br><span class="line"><span class="keyword">return</span> obj3</span><br></pre></td></tr></table></figure><p>我们感觉用这样的方式就是多此一举，但是这种方式可以使用在cookie上面，利用返回对象的方式来设置cookie</p><p><strong>设置cookie</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.set_cookie(key,value)</span><br></pre></td></tr></table></figure><p><strong>获取cookie</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.COOKIES[key]</span><br><span class="line">request.COOKIES.get(key)</span><br></pre></td></tr></table></figure><p><strong>设置cookie超时时间</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">obj.set_cookie(key,value,max_age=<span class="number">3</span>)</span><br><span class="line">obj.set_cookie(key,value,expires=<span class="number">3</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">这两个都是设置超时时间的，都是秒为单位，expires是针对IE浏览器的</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><strong>删除cookie</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.delete_cookie(key) <span class="comment"># 删除用户浏览器上之前设置的usercookie值</span></span><br></pre></td></tr></table></figure><h3 id="cookie版本的登录"><a href="#cookie版本的登录" class="headerlink" title="cookie版本的登录"></a>cookie版本的登录</h3><p>思路：# 我们完成一个真正的登陆功能，校验用户是否登陆的装饰器，用户如果在没有登陆的情下想访问一个需要登陆的页面，那么先跳转到登陆页面 当用户输入正确的用户名和密码之后</p><p><strong>登录认证装饰器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def login_auth(func):</span><br><span class="line">    def inner(request,*args,**kwargs):</span><br><span class="line">        # print(request.path_info)</span><br><span class="line">        # print(request.get_full_path())  # 能够获取到用户上一次想要访问的url</span><br><span class="line">        target_url &#x3D; request.get_full_path()</span><br><span class="line">        if request.COOKIES.get(&#39;username&#39;):</span><br><span class="line">            return func(request,*args,**kwargs)</span><br><span class="line">        else:</span><br><span class="line">            return redirect(&#39;&#x2F;login&#x2F;?next&#x3D;%s&#39;%target_url)</span><br><span class="line">    return inner</span><br></pre></td></tr></table></figure><p><strong>view视图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">'jason'</span> <span class="keyword">and</span> password == <span class="string">'123'</span>:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取用户上一次想要访问的url</span></span><br><span class="line">            target_url = request.GET.get(<span class="string">'next'</span>)  <span class="comment"># 这个结果可能是None</span></span><br><span class="line">            <span class="keyword">if</span> target_url:</span><br><span class="line">                obj = redirect(target_url)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 保存用户登陆状态</span></span><br><span class="line">                obj = redirect(<span class="string">'/home/'</span>)</span><br><span class="line">            <span class="comment"># 让浏览器记录cookie数据</span></span><br><span class="line">            obj.set_cookie(<span class="string">'username'</span>, <span class="string">'jason666'</span>)</span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            浏览器不单单会帮你存</span></span><br><span class="line"><span class="string">            而且后面每次访问你的时候还会带着它过来</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">            <span class="comment"># 跳转到一个需要用户登陆之后才能看的页面</span></span><br><span class="line">            <span class="keyword">return</span> obj</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'login.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_auth</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 获取cookie信息 判断你有没有</span></span><br><span class="line">    <span class="comment"># if request.COOKIES.get('username') == 'jason666':</span></span><br><span class="line">    <span class="comment">#     return HttpResponse("我是home页面，只有登陆的用户才能进来哟~")</span></span><br><span class="line">    <span class="comment"># # 没有登陆应该跳转到登陆页面</span></span><br><span class="line">    <span class="comment"># return redirect('/login/')</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"我是home页面，只有登陆的用户才能进来哟~"</span>)</span><br></pre></td></tr></table></figure><h3 id="cookie-其他操作"><a href="#cookie-其他操作" class="headerlink" title="cookie 其他操作"></a>cookie 其他操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 获取cookie</span></span><br><span class="line">request.get_signed_cookie(key, default=RAISE_ERROR, salt=<span class="string">''</span>, max_age=<span class="literal">None</span>)</span><br><span class="line">参数：</span><br><span class="line">    default: 默认值</span><br><span class="line">    salt: 加密盐</span><br><span class="line">    max_age: 后台控制过期时间</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment"># 设置cookie</span></span><br><span class="line">rep.set_signed_cookie(key, value, salt=<span class="string">'加密盐'</span>, max_age=<span class="literal">None</span>, ...)</span><br><span class="line">参数：</span><br><span class="line">    key, 键</span><br><span class="line">    value=<span class="string">''</span>, 值</span><br><span class="line">    max_age=<span class="literal">None</span>, 过期时间</span><br><span class="line">    expires=<span class="literal">None</span>, 过期时间(IE requires expires, so set it <span class="keyword">if</span> hasn<span class="string">'t been already.)</span></span><br><span class="line"><span class="string">    path='</span>/<span class="string">', Cookie生效的路径，/ 表示根路径，特殊的：根路径的cookie可以被任何url的页面访问</span></span><br><span class="line"><span class="string">    domain=None, Cookie生效的域名</span></span><br><span class="line"><span class="string">    secure=False, 是否https传输</span></span><br><span class="line"><span class="string">    httponly=False 只能http协议传输，无法被JavaScript获取（不是绝对，底层抓包可以获取到也可以被覆盖）</span></span><br></pre></td></tr></table></figure><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>Cookie虽然在一定程度上解决了“保持状态”的需求，但是由于Cookie本身最大支持4096字节，以及Cookie本身保存在客户端，可能被拦截或窃取。因此就需要有一种新的东西，它能支持更多的字节，并且他保存在服务器，有较高的安全性。这就是Session。</p><p>问题来了，基于HTTP协议的无状态特征，服务器根本就不知道访问者是“谁”。那么上述的Cookie就起到桥接的作用。</p><p>我们可以给每个客户端的Cookie分配一个唯一的id，这样用户在访问时，通过Cookie，服务器就知道来的人是“谁”。然后我们再根据不同的Cookie的id，在服务器上保存一段时间的私密资料，如“账号密码”等等。</p><p><strong>总结而言：Cookie弥补了HTTP无状态的不足，让服务器知道来的人是“谁”；但是Cookie以文本的形式保存在本地，自身安全性较差；所以我们就通过Cookie识别不同的用户，对应的在Session里保存私密的信息以及超过4096字节的文本。</strong></p><p>另外，上述所说的Cookie和Session其实是共通性的东西，不限于语言和框架。</p><h3 id="session-的基本操作"><a href="#session-的基本操作" class="headerlink" title="session 的基本操作"></a>session 的基本操作</h3><p>django种的session是通过request对象下的session完成的，它类似与一个字典，操作方式和字典也是差不多的</p><ul><li>session数据是保存在服务端的(存？)，给客户端返回的是一个随机字符串<br>sessionid:随机字符串</li><li>在默认情况下操作session的时候需要django默认的一张django_session表</li><li>django默认session的过期时间是14天，可以认为修改它。</li><li>session是保存在服务端的，但是session的保存位置可以有多种选择：数据库、文件等等</li><li>django_session表中的数据条数是取决于浏览器的，同一个计算机上(IP地址)同一个浏览器只会有一条数据生效。主要是为了节省服务端数据库资源。</li></ul><p><strong>设置session</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.session[<span class="string">'key'</span>]=value</span><br></pre></td></tr></table></figure><p><strong>获取session</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.session.get(<span class="string">'key'</span>)</span><br></pre></td></tr></table></figure><p><strong>设置过期时间</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">request.session.set_expiry()</span><br><span class="line">括号内可以放四种类型的参数</span><br><span class="line">1.整数多少秒</span><br><span class="line">2.日期对象  到指定日期就失效</span><br><span class="line">3.0 一旦当前浏览器窗口关闭立刻失效</span><br><span class="line">4.不写失效时间就取决于django内部全局session默认的失效时间</span><br></pre></td></tr></table></figure><p>*<em>清除session    *</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">request.session.delete()  <span class="comment"># 只删服务端的 客户端的不删</span></span><br><span class="line">request.session.flush()  <span class="comment"># 浏览器和服务端都清空(推荐使用)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 这用于确保前面的会话数据不可以再次被用户的浏览器访问</span><br></pre></td></tr></table></figure><h3 id="session内部的那些事"><a href="#session内部的那些事" class="headerlink" title="session内部的那些事"></a>session内部的那些事</h3><p><strong>设置session</strong></p><p>request.session[‘is_login’] = ‘yes’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> django内部会自动帮你生成一个随机字符串</span><br><span class="line"><span class="number">2.</span> django内部自动将随机字符串和对应的数据存储到django_session表中,</span><br><span class="line">   先在内存中产生操作数据的缓存,在响应结果django中间件的时候才真正的操作数据库</span><br><span class="line"><span class="number">3.</span> 将产生的随机字符串返回给客户端浏览器保存</span><br></pre></td></tr></table></figure><p>request.session.get(‘is_login’)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>自动从浏览器请求中获取sessionid对应的随机字符串</span><br><span class="line"><span class="number">2.</span>拿着该随机字符串去django_session表中查找对应的数据 </span><br><span class="line"><span class="number">3.</span> 如果比对上了 则将对应的数据取出并以字典的形式封装到request.session中</span><br><span class="line">   如果比对不上 则request.session.get()返回的是<span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="session实现登录认证"><a href="#session实现登录认证" class="headerlink" title="session实现登录认证"></a>session实现登录认证</h3><p><strong>登录装饰器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> redirect</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_auth</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(request, *args, **kwargs)</span>:</span></span><br><span class="line">        target_url = request.get_full_path()                <span class="comment"># 获取用户想要访问的url</span></span><br><span class="line">        <span class="keyword">if</span> request.session.get(<span class="string">'login_auth_key'</span>)</span><br><span class="line">            res = func(request, *args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">f'/login/?next=<span class="subst">&#123;target_url&#125;</span>'</span>)   <span class="comment"># 设置登录后跳转的页面url</span></span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure><p>视图函数：<code>views.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.login_auth <span class="keyword">import</span> login_auth</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="keyword">if</span> login_success:<span class="comment"># 伪代码</span></span><br><span class="line">            target_url = request.GET.get(<span class="string">'next'</span>) <span class="keyword">or</span> <span class="string">'index'</span>    <span class="comment"># 登录前要访问的页面或者直接到index</span></span><br><span class="line">            request.session[<span class="string">'login_auth_key'</span>] = <span class="string">'is_login'</span></span><br><span class="line">            <span class="keyword">return</span> redirect(target_url)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>, locals())</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@login_auth</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">(request)</span>:</span></span><br><span class="line">    request.session.flush()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'login'</span>)</span><br></pre></td></tr></table></figure><h3 id="django中的session设置"><a href="#django中的session设置" class="headerlink" title="django中的session设置"></a>django中的session设置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 数据库Session</span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.db'</span>     <span class="comment"># 引擎（默认）</span></span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span> 缓存Session</span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.cache'</span>  <span class="comment"># 引擎</span></span><br><span class="line">SESSION_CACHE_ALIAS = <span class="string">'default'</span>                            <span class="comment"># 使用的缓存别名（默认内存缓存，也可以是memcache），此处别名依赖缓存的设置</span></span><br><span class="line"> </span><br><span class="line"><span class="number">3.</span> 文件Session</span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.file'</span>             <span class="comment"># 引擎</span></span><br><span class="line">SESSION_FILE_PATH = <span class="literal">None</span>                                             <span class="comment"># 缓存文件路径，如果为None，则使用tempfile模块获取一个临时地址tempfile.gettempdir() </span></span><br><span class="line"> </span><br><span class="line"><span class="number">4.</span> 缓存+数据库</span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.cached_db'</span>        <span class="comment"># 引擎</span></span><br><span class="line"> </span><br><span class="line"><span class="number">5.</span> 加密Cookie Session</span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.signed_cookies'</span>   <span class="comment"># 引擎</span></span><br><span class="line"> </span><br><span class="line">其他公用设置项：</span><br><span class="line">SESSION_COOKIE_NAME ＝ <span class="string">"sessionid"</span>                       <span class="comment"># Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）</span></span><br><span class="line">SESSION_COOKIE_PATH ＝ <span class="string">"/"</span>                               <span class="comment"># Session的cookie保存的路径（默认）</span></span><br><span class="line">SESSION_COOKIE_DOMAIN = <span class="literal">None</span>                             <span class="comment"># Session的cookie保存的域名（默认）</span></span><br><span class="line">SESSION_COOKIE_SECURE = <span class="literal">False</span>                            <span class="comment"># 是否Https传输cookie（默认）</span></span><br><span class="line">SESSION_COOKIE_HTTPONLY = <span class="literal">True</span>                           <span class="comment"># 是否Session的cookie只支持http传输（默认）</span></span><br><span class="line">SESSION_COOKIE_AGE = <span class="number">1209600</span>                             <span class="comment"># Session的cookie失效日期（2周）（默认）</span></span><br><span class="line">SESSION_EXPIRE_AT_BROWSER_CLOSE = <span class="literal">False</span>                  <span class="comment"># 是否关闭浏览器使得Session过期（默认）</span></span><br><span class="line">SESSION_SAVE_EVERY_REQUEST = <span class="literal">False</span>                       <span class="comment"># 是否每次请求都保存Session，默认修改之后才保存（默认）</span></span><br></pre></td></tr></table></figure><h2 id="CBV如何添加装饰器"><a href="#CBV如何添加装饰器" class="headerlink" title="CBV如何添加装饰器"></a>CBV如何添加装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">CBV中django不建议你直接给类的方法加装饰器</span></span><br><span class="line"><span class="string">无论该装饰器能都正常给你 都不建议直接加</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @method_decorator(login_auth,name='get')  # 方式2(可以添加多个针对不同的方法加不同的装饰器)</span></span><br><span class="line"><span class="comment"># @method_decorator(login_auth,name='post')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLogin</span><span class="params">(View)</span>:</span></span><br><span class="line"><span class="meta">    @method_decorator(login_auth)  # 方式3:它会直接作用于当前类里面的所有的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super().dispatch(request,*args,**kwargs)</span><br><span class="line">    <span class="comment"># @method_decorator(login_auth)  # 方式1:指名道姓</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"get请求"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'post请求'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;cookie-和session&quot;&gt;&lt;a href=&quot;#cookie-和session&quot; class=&quot;headerlink&quot; title=&quot;cookie 和session&quot;&gt;&lt;/a&gt;cookie 和session&lt;/h2&gt;&lt;p&gt;HTTP协议是无状态的，这意味这所有
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>mysql-存储引擎</title>
    <link href="http://yoursite.com/2020/07/09/mysql-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
    <id>http://yoursite.com/2020/07/09/mysql-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</id>
    <published>2020-07-09T13:56:43.073Z</published>
    <updated>2020-05-04T11:02:26.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>针对不同的文件格式会有不同的存储方式和处理机制，针对不同的数据应该有对应不同的处理机制来存储</p><p><strong>mysql主要的存储引擎</strong></p><ul><li><p>innodb</p><p>这个是mysql5.5版本之后默认的存储引擎，存储数据更加的安全</p></li><li><p>myisam</p><p>这个是mysql5.5版本之前默认的存储引擎，速度比innodb更快，但是数据不安全</p></li><li><p>memory</p><p>内存引擎，数据全部放在内存中，断电数据丢失</p></li><li><p>blackhole</p><p>无论存什么，都会立刻消失</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有引擎</span></span><br><span class="line">show engines;</span><br><span class="line"><span class="comment"># 不同的存储引擎在存储表的时候的异同点</span></span><br><span class="line">create table t1(id int) engine=innodb;</span><br><span class="line">create table t2(id int) engine=myisam;</span><br><span class="line">create table t3(id int) engine=memory;</span><br><span class="line">create table t4(id int) engine=blackhole;</span><br><span class="line"><span class="comment"># 存数据</span></span><br><span class="line">insert into t1 values(<span class="number">1</span>);</span><br><span class="line">insert into t2 values(<span class="number">1</span>);</span><br><span class="line">insert into t3 values(<span class="number">1</span>);</span><br><span class="line">insert into t4 values(<span class="number">1</span>);</span><br><span class="line">查看表发现t1 <span class="keyword">and</span> t2有东西，但是只要mysql重新启动，t3就是空，t4会即刻释放</span><br></pre></td></tr></table></figure><p><strong>创建表的完整语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">create table 表名(</span><br><span class="line">    字段名<span class="number">1</span> 类型(宽度) 约束条件</span><br><span class="line">    字段名<span class="number">2</span> 类型(宽度) 约束条件</span><br><span class="line">    字段名<span class="number">3</span> 类型(宽度) 约束条件    </span><br><span class="line">    字段名<span class="number">4</span> 类型(宽度) 约束条件</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>强调</strong></p><ul><li><p>在同一张表中字段名字不能重复</p></li><li><p>宽度和约束条件是可选的，约束条件支持多个</p><figure class="highlight plain"><figcaption><span>类型(宽度)  约束条件1 约束条件2；```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  &#96;&#96;&#96; create table t5(id); &#96;&#96;&#96;报错</span><br><span class="line"></span><br><span class="line">* 最后一行不能有逗号</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96; python</span><br><span class="line">  create table t6(</span><br><span class="line">  </span><br><span class="line">      id int,</span><br><span class="line">      name char</span><br><span class="line">  )</span><br></pre></td></tr></table></figure></li></ul><p><strong>补充说明</strong></p><ul><li><p><strong>宽度</strong>：一般情况下指对存储数据的限制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create table t7(name char); 默认宽度是<span class="number">1</span></span><br><span class="line">insert into t7 values(<span class="string">'json'</span>);</span><br><span class="line">insert into t7 values(null);null是关键字</span><br></pre></td></tr></table></figure><p>针对不同的版本是出现不同的效果</p><p>5.6版本默认没有开启严格模式，规定只能存放一个字符，多出的字符自动截取</p><p>5.7版本以上是开启了严格模式，规定存放的个数，多出自动报错</p></li></ul><ul><li><strong>严格模式</strong>： mysql5.7之后的版本是默认开启的严格模式，使用数据库的标准就是：能尽量少的让数据库敢活就尽量少，不给数据库增加额外的压力。</li></ul><ul><li><p><strong>约束条件</strong>：null  not null不能插入rull</p><figure class="highlight plain"><figcaption><span>table t8(id int,name char not null)```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* **宽度和约束条件的关系**：宽度是限制数据的存储，约束条件是在宽度的基础上增加额外的约束</span><br><span class="line"></span><br><span class="line">## 基本数据类型</span><br><span class="line"></span><br><span class="line">### 整型</span><br><span class="line"></span><br><span class="line">* **分类**：</span><br><span class="line"></span><br><span class="line">  TINYINT SMALLINT MEDUIMINT INT BIGINT</span><br><span class="line"></span><br><span class="line">* **作用**：</span><br><span class="line"></span><br><span class="line">  存一些年龄，等级 id，号码等等</span><br><span class="line"></span><br><span class="line">例子：**TINYINT** 是否有符号，默认的是带符号的，超出限制存最大可接受值</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96; python</span><br><span class="line">create table t9(id tinyint);</span><br><span class="line">insert into t9 values(-129),(256);</span><br><span class="line"></span><br><span class="line"># 约束条件unsigned 无符号</span><br><span class="line">create table t10(id tinyint unsigned);</span><br><span class="line"></span><br><span class="line">create table t11(id int);</span><br><span class="line"># int 默认也是带符号的，整型默认情况下的欧式带有符号的</span><br><span class="line"></span><br><span class="line"># 针对整型 括号内的宽度有限</span><br><span class="line">create table t12(id int(8));</span><br><span class="line">insert into t12 values(123456789)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">特例:只有整型括号里面的数字不是表示限制位数</span><br><span class="line">id int(8)</span><br><span class="line">如果数字没有超出8位 那么默认用空格填充至8位</span><br><span class="line">如果数字超出了8位 那么有几位就存几位(但是还是要遵守最大范围)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">create table t13(id int(8) unsigned zerofill);</span><br><span class="line"></span><br><span class="line"># 针对整型字段括号内无需指定宽度，默认的宽度足够显示所有数据</span><br></pre></td></tr></table></figure></li></ul><p><strong>严格模式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如何查看严格模式</span></span><br><span class="line">show variables like <span class="string">"%mode"</span>;</span><br><span class="line"></span><br><span class="line">模糊匹配/查询</span><br><span class="line">关键字 like</span><br><span class="line">%:匹配任意多个字符</span><br><span class="line">        _:匹配任意单个字符</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改严格模式</span></span><br><span class="line">set session  只在当前窗口有效</span><br><span class="line">    set <span class="keyword">global</span>   全局有效</span><br><span class="line">    </span><br><span class="line">    set <span class="keyword">global</span> sql_mode = <span class="string">'STRICT_TRANS_TABLES'</span>;</span><br><span class="line">    </span><br><span class="line">    修改完之后 重新进入服务端即可</span><br></pre></td></tr></table></figure><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><ul><li>char(4) 数据超过4个字符直接报错，不厚的字符空格补全</li><li>varchar(4) 数据超过4个字符直接报错，不够截取</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table t18(name char(<span class="number">4</span>));</span><br><span class="line">create table t19(name varchar(<span class="number">4</span>));</span><br><span class="line">insert into t18 values(<span class="string">'a'</span>);</span><br><span class="line">insert into t19 values(<span class="string">'a'</span>);</span><br><span class="line"><span class="comment"># 统计char_length字段长度</span></span><br><span class="line">select char_length(name) <span class="keyword">from</span> t18;</span><br><span class="line"><span class="comment"># char硬盘里存放的是真正的数据，带有空格的，但是在mysql显示会自动将多余的空格剔除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次修改sql_mode 让MySQL不要做自动剔除操作</span></span><br><span class="line">set <span class="keyword">global</span> sql_mode=<span class="string">'STRICT_TRABLES,PAD_CHAR_TO_FULL_LENGTH'</span></span><br></pre></td></tr></table></figure><p><strong>char和varchar对比</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">char 缺点：浪费空间</span><br><span class="line"> 优点：直接按照固定的字符存取数据</span><br><span class="line">     json egon alex wusir tank</span><br><span class="line">     存按照五个字符存，取也是五个字符取</span><br><span class="line">    </span><br><span class="line">varchar 优点：节省空间</span><br><span class="line">缺点：存取比较麻烦</span><br><span class="line">    存的时候需要制作报头，取也需要报头，最后才能取到真实的数据，</span><br></pre></td></tr></table></figure><h3 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h3><ul><li><p>分类：data： 年月日2015-2-03</p><p>​            datatime：年月日时分秒</p><p>​            time：时分秒</p><p>​            Year:2020</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table student(</span><br><span class="line">    id int,</span><br><span class="line">    name varchar(<span class="number">6</span>),</span><br><span class="line">    born_year year,</span><br><span class="line">    birth data,</span><br><span class="line">    study_time time,</span><br><span class="line">    reg_time datatime</span><br><span class="line">);</span><br><span class="line">insert into student values(<span class="number">1</span>,<span class="string">'zc'</span>,<span class="string">'1990'</span>,<span class="string">'1999-11-11'</span>,<span class="string">'11:11:11'</span>,<span class="string">'2020-11-11 11:11:11'</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="枚举与集合"><a href="#枚举与集合" class="headerlink" title="枚举与集合"></a>枚举与集合</h3><ul><li><p>分类：枚举（多选一）</p><p>​            集合（多选多）</p></li><li><p>具体用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">create table user(</span><br><span class="line">id int,</span><br><span class="line">    name char(<span class="number">16</span>),</span><br><span class="line">    gender enum(<span class="string">'male'</span>,<span class="string">'female'</span>)</span><br><span class="line">);</span><br><span class="line">insert into user values(<span class="number">1</span>,<span class="string">'zc'</span>,<span class="string">'male'</span>)</span><br><span class="line"><span class="comment"># 枚举后期存数据的时候只能从里面悬着一个存储</span></span><br><span class="line"></span><br><span class="line">create table teacher(</span><br><span class="line">id int,</span><br><span class="line">    name char(<span class="number">6</span>),</span><br><span class="line">    gender enum(<span class="string">'male'</span>,<span class="string">'female'</span>),</span><br><span class="line">    hobby set(<span class="string">'read'</span>,<span class="string">'play'</span>,<span class="string">'running'</span>)</span><br><span class="line"></span><br><span class="line">)；</span><br><span class="line"></span><br><span class="line">insert into teacher values(<span class="number">1</span>,<span class="string">'zc'</span>,<span class="string">'male'</span>,<span class="string">'read'</span>);</span><br><span class="line">insert into teacher values(<span class="number">2</span>,<span class="string">'zcc'</span>,<span class="string">'female'</span>,<span class="string">'read,running'</span>);</span><br><span class="line">insert into teacher values(<span class="number">2</span>,<span class="string">'zcz'</span>,<span class="string">'male'</span>,<span class="string">'eat'</span>);</span><br><span class="line"><span class="comment"># 集合可以写一个或选择多个，但是不能写里面没有的</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;存储引擎&quot;&gt;&lt;a href=&quot;#存储引擎&quot; class=&quot;headerlink&quot; title=&quot;存储引擎&quot;&gt;&lt;/a&gt;存储引擎&lt;/h2&gt;&lt;p&gt;针对不同的文件格式会有不同的存储方式和处理机制，针对不同的数据应该有对应不同的处理机制来存储&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>django-批量插入</title>
    <link href="http://yoursite.com/2020/07/09/django-%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5/"/>
    <id>http://yoursite.com/2020/07/09/django-%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5/</id>
    <published>2020-07-09T13:56:30.866Z</published>
    <updated>2020-06-07T06:58:27.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab_pl</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 先给Book插入一万条数据</span></span><br><span class="line">    <span class="comment"># for i in range(10000):</span></span><br><span class="line">    <span class="comment">#     models.Book.objects.create(title='第%s本书'%i)</span></span><br><span class="line">    <span class="comment"># # 再将所有的数据查询并展示到前端页面</span></span><br><span class="line">    book_queryset = models.Book.objects.all()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 批量插入</span></span><br><span class="line">    <span class="comment"># book_list = []</span></span><br><span class="line">    <span class="comment"># for i in range(100000):</span></span><br><span class="line">    <span class="comment">#     book_obj = models.Book(title='第%s本书'%i)</span></span><br><span class="line">    <span class="comment">#     book_list.append(book_obj)</span></span><br><span class="line">    models.Book.objects.bulk_create(book_list)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    当你想要批量插入数据的时候 使用orm给你提供的bulk_create能够大大的减少操作时间</span></span><br><span class="line"><span class="string">    :param request: </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'ab_pl.html'</span>,locals())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;批量插入&quot;&gt;&lt;a href=&quot;#批量插入&quot; class=&quot;headerlink&quot; title=&quot;批量插入&quot;&gt;&lt;/a&gt;批量插入&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>由django中间件引发的编程思想</title>
    <link href="http://yoursite.com/2020/07/09/%E7%94%B1django%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%BC%95%E5%8F%91%E7%9A%84%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    <id>http://yoursite.com/2020/07/09/%E7%94%B1django%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%BC%95%E5%8F%91%E7%9A%84%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/</id>
    <published>2020-07-09T13:56:26.963Z</published>
    <updated>2020-06-08T09:38:39.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="由django中间件引发的编程思想"><a href="#由django中间件引发的编程思想" class="headerlink" title="由django中间件引发的编程思想"></a>由django中间件引发的编程思想</h2><p>创建一个文件夹，把一个个功能写成一个个py文件,假如我们写一个消息通知，让qq， 微信，邮箱都能接收到，qq， 微信，邮箱就是一个个功能</p><p><strong>aapp02文件夹下的qq.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Qq</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self,content)</span>:</span></span><br><span class="line">        print(<span class="string">f'QQ通知：<span class="subst">&#123;content&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p><strong>aapp02文件夹下的wechat.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wechat</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self,content)</span>:</span></span><br><span class="line">        print(<span class="string">f'微信通知：<span class="subst">&#123;content&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p><strong>aapp02文件夹下的email.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self,content)</span>:</span></span><br><span class="line">        print(<span class="string">f'邮件通知：<span class="subst">&#123;content&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p><strong>aapp02文件夹下的<code>__init__.py</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  settings</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_all</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> path_str <span class="keyword">in</span> settings.APP02_LIST:</span><br><span class="line">        module_path ,class_name = path_str.rsplit(<span class="string">'.'</span>,maxsplit=<span class="number">1</span>) </span><br><span class="line">        module = importlib.import_module((module_path)) <span class="comment">#1 利用字符串导入模块</span></span><br><span class="line">        cls = getattr(module,class_name) <span class="comment"># 2 利用反射获取类名</span></span><br><span class="line">        obj =cls() <span class="comment"># 3 生成类的对象</span></span><br><span class="line">        obj.send(content)  <span class="comment"># 4 利用鸭子类型直接调用send方法</span></span><br></pre></td></tr></table></figure><p><strong>settings.py</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">APP02_LIST = [</span><br><span class="line">    <span class="string">'aapp02.email.Email'</span>,</span><br><span class="line">    <span class="string">'aapp02.qq.Qq'</span>,</span><br><span class="line">    <span class="string">'aapp02.wechat.Wechat'</span>,</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>start.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> aapp02</span><br><span class="line">aapp02.send_all(<span class="string">'下课了'</span>)</span><br></pre></td></tr></table></figure><p>当我们添加或者删除一个功能的时候，只需要在seetings里面添加或注释掉就可以了.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;由django中间件引发的编程思想&quot;&gt;&lt;a href=&quot;#由django中间件引发的编程思想&quot; class=&quot;headerlink&quot; title=&quot;由django中间件引发的编程思想&quot;&gt;&lt;/a&gt;由django中间件引发的编程思想&lt;/h2&gt;&lt;p&gt;创建一个文件夹，把一
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>bbs</title>
    <link href="http://yoursite.com/2020/07/05/bbs/"/>
    <id>http://yoursite.com/2020/07/05/bbs/</id>
    <published>2020-07-05T12:43:05.741Z</published>
    <updated>2020-07-10T09:29:54.133Z</updated>
    
    <content type="html"><![CDATA[<p>js只要用到内置对象，直接用new生成就可以了</p><h2 id="1-用户注册上传头像"><a href="#1-用户注册上传头像" class="headerlink" title="1. 用户注册上传头像"></a>1. 用户注册上传头像</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="form-group"&gt;</span><br><span class="line">                &lt;label <span class="keyword">for</span>=<span class="string">"myfile"</span>&gt;头像</span><br><span class="line">                    &#123;% load static %&#125;</span><br><span class="line">                    &lt;img id="myimg" src="&#123;% static 'img/default.png' %&#125;" alt="" width="80" style="margin-left: 20px"&gt;&lt;/label&gt;</span><br><span class="line">                &lt;input type=<span class="string">"file"</span> id=<span class="string">"myfile"</span> name=<span class="string">"avater"</span> style=<span class="string">"display: none"</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //文本域变化事件</span><br><span class="line">    $(<span class="string">'#myfile'</span>).change(function () &#123;</span><br><span class="line">        //文件阅读器对象</span><br><span class="line">        //<span class="number">1.</span>先生成一个文件阅读器对象</span><br><span class="line">        let myFileReadObj = new FileReader(); // 文件阅读器</span><br><span class="line">        //<span class="number">2.</span> 获取用户上传的头像文件</span><br><span class="line">        let fileObj = $(this)[<span class="number">0</span>].files[<span class="number">0</span>]; //获取文件</span><br><span class="line">        // <span class="number">3.</span>将文件对象交给文件阅读器读取</span><br><span class="line">        myFileReadObj.readAsDataURL(fileObj) //异步操作，io操作，这行代码文件还没有读完，就已经开始执行下一句代码，在前端不显示</span><br><span class="line">        //<span class="number">4.</span>利用文件阅读器将文件展示到页面去 修改src属性</span><br><span class="line">        //等待文件阅读器加载完之后，在执行</span><br><span class="line">        myFileReadObj.onload = function()&#123;  $(<span class="string">'#myimg'</span>).attr(<span class="string">'src'</span>,myFileReadObj.result)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><ul><li>这里我们要用到文本与变化事件，利用文件阅读器对象，我们要先生成一个文件阅读器对象，</li><li>获取用户上传的头像文件读取出来</li><li>将文件对象交给文件阅读器读取出来文件</li><li>利用文件阅读器将文件展示到页面上去，就要修改src属性，<code>myFileReadObj.readAsDataURL(fileObj)</code>和<code>$(&#39;#myimg&#39;).attr(&#39;src&#39;,myFileReadObj.result)</code>这两部是一个异步操作，如果你在执上一代码的同时文件还没有读取出来，同时他还在执行下一句代码，这样会造成你上传之后在前端是不显示你上传的头像，空白区，我们要等文件加载完毕在执行下一局，<code>myFileReadObj.onload</code> </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"> $(<span class="string">'#id_commit'</span>).click(function () &#123;</span><br><span class="line">        // 发送ajax请求     我们发送的数据中即包含普通的键值也包含文件</span><br><span class="line">        let formDataObj = new FormData();</span><br><span class="line">        // <span class="number">1.</span>添加普通的键值对</span><br><span class="line">        &#123;<span class="comment">#console.log($('#myform').serializeArray())  // [&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;]  只包含普通键值对#&#125;</span></span><br><span class="line">        $.each($(<span class="string">'#myform'</span>).serializeArray(),function (index,obj) &#123;</span><br><span class="line">            &#123;<span class="comment">#console.log(index,obj)#&#125;  // obj = &#123;&#125;</span></span><br><span class="line">            formDataObj.append(obj.name,obj.value)</span><br><span class="line">        &#125;);</span><br><span class="line">        // <span class="number">2.</span>添加文件数据</span><br><span class="line">        formDataObj.append(<span class="string">'avatar'</span>,$(<span class="string">'#myfile'</span>)[<span class="number">0</span>].files[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        // <span class="number">3.</span>发送ajax请求</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">""</span>,</span><br><span class="line">            type:<span class="string">'post'</span>,</span><br><span class="line">            data:formDataObj,</span><br><span class="line"></span><br><span class="line">            // 需要指定两个关键性的参数</span><br><span class="line">            contentType:false,</span><br><span class="line">            processData:false,</span><br><span class="line"></span><br><span class="line">            success:function (args) &#123;</span><br><span class="line">                <span class="keyword">if</span> (args.code==<span class="number">1000</span>)&#123;</span><br><span class="line">                    // 跳转到登陆页面</span><br><span class="line">                    window.location.href = args.url</span><br><span class="line">                &#125;els</span><br><span class="line">                    // 如何将对应的错误提示展示到对应的input框下面</span><br><span class="line">                    // forms组件渲染的标签的id值都是 id_字段名</span><br><span class="line">                    $.each(args.msg,function (index,obj) &#123;</span><br><span class="line">                        &#123;<span class="comment">#console.log(index,obj)  //  username        ["用户名不能为空"]#&#125;</span></span><br><span class="line">                        let targetId = <span class="string">'#id_'</span> + index;</span><br><span class="line">                        $(targetId).next().text(obj[<span class="number">0</span>]).parent().addClass(<span class="string">'has-error'</span>)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 产生一个空对象</span></span><br><span class="line">    register_form = myforms.MyRegForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        back_dic = &#123;<span class="string">'code'</span>:<span class="string">''</span>, <span class="string">'msg'</span>: <span class="string">''</span>&#125;</span><br><span class="line">        <span class="comment"># 校验数据是否合法</span></span><br><span class="line">        register_form = myforms.MyRegForm(request.POST)</span><br><span class="line">        <span class="comment"># 判断数据是否合法</span></span><br><span class="line">        <span class="keyword">if</span> register_form.is_valid():</span><br><span class="line">            clean_data = register_form.cleaned_data <span class="comment"># 将校验通过的数据字典赋值给一个变量</span></span><br><span class="line">            <span class="comment"># 将字典里面吗的confirm_password键值对删除</span></span><br><span class="line">            clean_data.pop(<span class="string">'confirm_password'</span>)</span><br><span class="line">            <span class="comment"># 用户头像</span></span><br><span class="line">            file_obj = request.FILES.get(<span class="string">'avatar'</span>)</span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            针对用户头像一定要判断是否传之，不能直接添加到字典里面去</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">            <span class="keyword">if</span> file_obj:</span><br><span class="line">                clean_data[<span class="string">'avatar'</span>] = file_obj</span><br><span class="line">            <span class="comment"># 直接操作数据库保存到字典里面</span></span><br><span class="line">            models.UserInfo.objects.create_user(**clean_data) <span class="comment"># 将键值对**打散传到数据库</span></span><br><span class="line">            <span class="comment"># 判断正确跳转到登录页面</span></span><br><span class="line">            back_dic[<span class="string">'url'</span>] = <span class="string">'/login/'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            back_dic[<span class="string">'code'</span>] = <span class="number">2000</span></span><br><span class="line">            back_dic[<span class="string">'msg'</span>] = register_form.errors</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(back_dic)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'register.html'</span>, locals())</span><br></pre></td></tr></table></figure><p><strong>前端：</strong></p><ul><li><p>头像的功能完成之后，剩下的就是将利用ajax将文件发送到后端，前端要先利用内置对象获取数据，添加不同键值对，我们可以利用<code>serializeArray()</code>拿到他所有的键值对，利用each循环拿到每一个对象的键值对</p></li><li><p>利用append添加文件数据，发送ajax请求，这里面我们要指定两个关键参数<code>contentType: false</code>,<code>processData: false</code>,</p></li><li><p>如果后端保存数据成功，就跳转到后端写好传过来的指定页面，如果校验数据失败就在input框下面展现出对应的错误</p></li><li><p>当我们看见错误的信息之后，如果把鼠标放上去，指定的错误就会消失，给所有的input框绑定获取焦点事件，将input下面的span标签和input外面的div标签修改内容和属性</p></li></ul><p><strong>后端</strong></p><ul><li>校验数据输入的是否合法，将合法的数据赋值给一个变量，赋值给一个变量方便我们删除确认密码的键值对，因为我们在写models的时候没有这个字段，针对用户头像一定要判断是否传之，不能直接添加到字典里面去，在models里面我们给他默认了一个头像</li><li>操作数据库保存数据，定义字典将信息返回给ajax，ajax都到在页面展示对应的页面信息</li></ul><p>存取问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line"> data  = register_form.cleaned_data</span><br><span class="line"> models.UserInfo.objects.create_user(**data)</span><br><span class="line"> 这里我们在前端像后端存的时候出现了问题，原因是models里面的username和password必须和form表单里面的字段名一致，因为我们去表单里面验证的时候用的是form表单里面的字段名去数据库里面存，**data的时候字段名这个和数据库里面的字段名不一样</span><br></pre></td></tr></table></figure><h2 id="2-生成登录验证码"><a href="#2-生成登录验证码" class="headerlink" title="2. 生成登录验证码"></a>2. 生成登录验证码</h2><p>如何生成一个验证码，然后点击它就可以刷新呢。</p><p>利用pip3 install pillow ，这个是图片相关的模块。</p><p>导入模块：<code>from PIL import Image, ImageDraw, ImageFont</code></p><ul><li>Image 生成图片</li><li>ImageDraw 能够在图片上添加东西</li><li>ImageFont 控制字体的样式</li></ul><p><strong>推导1</strong>：</p><p>直接获取后端生成的图片二进制数据发送给前端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">r'static/img/111.jpg'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">      data = f.read()</span><br><span class="line"><span class="keyword">return</span> HttpResponse(data)</span><br></pre></td></tr></table></figure><p><strong>推导2</strong></p><p>利用pillow模块动态产生图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">img_obj = Image.new(<span class="string">'RGB'</span>,(<span class="number">430</span>,<span class="number">35</span>),<span class="string">'green'</span>)</span><br><span class="line">img_obj = Image.new(<span class="string">'RGB'</span>,(<span class="number">430</span>,<span class="number">35</span>),get_random())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将图片对象 保存起来</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.png'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    img_obj.save(f,<span class="string">'png'</span>)</span><br><span class="line"><span class="comment"># 再将文件对象读取出来</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.png'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"><span class="keyword">return</span> HttpResponse(data)</span><br></pre></td></tr></table></figure><p><strong>推导3</strong><br>我们可以看到利用文件存储繁琐而且IO操作效率低，我们可以借助内存管理模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO,StringIO</span><br><span class="line">img_obj = Image.new(<span class="string">'RGB'</span>, (<span class="number">430</span>, <span class="number">35</span>), get_random())</span><br><span class="line">io_obj = BytesIO()</span><br><span class="line">img_obj.save(io_obj,<span class="string">'png'</span>) <span class="comment"># 生成一个内存管理器对象</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse(io_obj.getvalue()) <span class="comment"># 从内存管理器中读取二进制的图片数据返回给前端</span></span><br></pre></td></tr></table></figure><p><strong>推导4</strong></p><p>写成图片验证码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img_obj = Image.new(<span class="string">'RGB'</span>, (<span class="number">430</span>, <span class="number">35</span>), get_random())</span><br><span class="line">img_draw = ImageDraw.Draw(img_obj)  <span class="comment"># 产生一个画笔对象</span></span><br><span class="line">img_font = ImageFont.truetype(<span class="string">'static/font/222.ttf'</span>,<span class="number">30</span>)  <span class="comment"># 字体样式 大小</span></span><br></pre></td></tr></table></figure><p><strong>最终成型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_random</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> random.randint(<span class="number">0</span>,<span class="number">255</span>),random.randint(<span class="number">0</span>,<span class="number">255</span>),random.randint(<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_code</span><span class="params">(request)</span>:</span></span><br><span class="line">    img_obj = Image.new(<span class="string">'RGB'</span>, (<span class="number">430</span>, <span class="number">35</span>), get_random()) <span class="comment"># 注意：这里的430，35要和前端的一致</span></span><br><span class="line">    img_draw = ImageDraw.Draw(img_obj)</span><br><span class="line">    img_font = ImageFont.truetype(<span class="string">'static/font/222.ttf'</span>,<span class="number">30</span>)</span><br><span class="line">    code = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        random_upper = chr(random.randint(<span class="number">65</span>,<span class="number">90</span>))</span><br><span class="line">        random_lower = chr(random.randint(<span class="number">97</span>,<span class="number">122</span>))</span><br><span class="line">        random_int = str(random.randint(<span class="number">0</span>,<span class="number">9</span>))</span><br><span class="line">        tmp = random.choice([random_lower,random_upper,random_int])</span><br><span class="line">        img_draw.text((i*<span class="number">60</span>+<span class="number">60</span>,<span class="number">-2</span>),tmp,get_random(),img_font)</span><br><span class="line">        code += tmp</span><br><span class="line">    print(code)</span><br><span class="line">    request.session[<span class="string">'code'</span>] = code</span><br><span class="line">    io_obj = BytesIO()</span><br><span class="line">    img_obj.save(io_obj,<span class="string">'png'</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(io_obj.getvalue())</span><br></pre></td></tr></table></figure><ul><li>实现低级验证码图片刷新验证码，这样设置后每次点击图片相当于超后端发送一次get请求获取一个新的验证码图片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment"># 点击验证码图片刷新验证码   #&#125;</span></span><br><span class="line">$(<span class="string">'#code_img'</span>).click(function () &#123;</span><br><span class="line">    $(this).attr('src', '&#123;% url "get_code" %&#125;?')// src='/get_code/?'url后面加?的操作</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-admin的使用"><a href="#3-admin的使用" class="headerlink" title="3. admin的使用"></a>3. admin的使用</h2><p>以前写图书的展示列表，我们给它添加增删改查的功能，特别的麻烦，现在有很多张表的展示，我们不可能慢慢的写这些功能，django给我们提供了admin后台管理，我们可以利用admin实现增删改查，添加数据。</p><p>首先要创建超级用户，只有超级用户才能够操作admin的这些功能。</p><p>刚开始登录进去的时候只用一张用户表，我们想要添加其他的表，必须添加注册</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># Register your models here.admin</span></span><br><span class="line">admin.site.register(models.UserInfo)</span><br><span class="line">admin.site.register(models.Blog)</span><br><span class="line">admin.site.register(models.Article)</span><br><span class="line">admin.site.register(models.Atricle2Tag)</span><br><span class="line">admin.site.register(models.UpAndDown)</span><br><span class="line">admin.site.register(models.Category)</span><br><span class="line">admin.site.register(models.Tag)</span><br><span class="line">admin.site.register(models.Comment)</span><br></pre></td></tr></table></figure><p>这样我们就可以使用这些表，但是他们是英文的，我们可以在model.py里面改变他们的名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">     verbose_name_plural=<span class="string">'用户表'</span></span><br></pre></td></tr></table></figure><p>我们进去操作添加添加一条数据显示的是对象，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(AbstractUser)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.username</span><br></pre></td></tr></table></figure><p>避免造成不便语义不明，打印出来</p><p>在model里面的字段添加<code>verbose_name=&#39;创建时间&#39;</code>会在admin后天帮助我们把字段的名称改成中文</p><h2 id="4-制作站点"><a href="#4-制作站点" class="headerlink" title="4. 制作站点"></a>4. 制作站点</h2><p>打开博客园，在博客园的url后面输入别人的站点名称就可以进到他们的站点，如<a href="https://home.cnblogs.com/the3times在后面输入`the3times`就会进到这个人的博客园的主页，这个是url来配置的，利用url`re`匹配规则就可以实现" target="_blank" rel="noopener">https://home.cnblogs.com/the3times在后面输入`the3times`就会进到这个人的博客园的主页，这个是url来配置的，利用url`re`匹配规则就可以实现</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^(?P&lt;username&gt;\w+)/$'</span>,views.site,name=<span class="string">'site'</span>),</span><br></pre></td></tr></table></figure><h2 id="5-media的配置"><a href="#5-media的配置" class="headerlink" title="5. media的配置"></a>5. media的配置</h2><p>网站用户使用的静态文件默认放在static里面，用户上传的静态文件应该单独放在一个文件夹下，可以使用media配置，该配置可以让用户上传的所有的文件 固定存放在指定的文件夹下</p><p>settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置用户上传的文件</span></span><br><span class="line">MEDIA_ROOT = os.path.jion(BASE_DIR,<span class="string">'media'</span>)</span><br></pre></td></tr></table></figure><p>我们配置后，我们上传文件会自动生成media文件，比如我们注册上传的头像会到这个地方，你存的路径在数据库中也不会改变，</p><p>假如你在model.py里面存的路径是<code>avatar/111.png</code>media里面就会多出一个存放头像的<code>avatar/111.png</code>这个就是你存放的头像路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(AbstractUser)</span>:</span></span><br><span class="line">    avatar = models.FileField(upload_to=<span class="string">'avatar/'</span>, default=<span class="string">'avatar/default.png'</span>, verbose_name=<span class="string">'用户头像'</span>)</span><br></pre></td></tr></table></figure><p>在前端点击这个头像能够查看到这个头像，需要我们在后端开设一个指定的文件夹资源</p><p>在url.py配置参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line"><span class="keyword">from</span> bbs <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">url(<span class="string">r'^media/(?P&lt;path&gt;.*)'</span>,serve,&#123;<span class="string">'document_root'</span>:settings.MEDIA_ROOT&#125;),</span><br></pre></td></tr></table></figure><p>如果你还想暴漏更多资源，在settings修改文件夹名，想暴露源码也可以，问题就大了</p><p>最后在html配置,渲染后的路径<code>/media/avatar/default.png/</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img class="media-object" src="/media/&#123;&#123; article_obj.blog.userinfo.avatar &#125;&#125;" alt="..." width="40"&gt;</span><br></pre></td></tr></table></figure><p>这样就可以看到别人的头像</p><h2 id="6-站点左边栏展示"><a href="#6-站点左边栏展示" class="headerlink" title="6. 站点左边栏展示"></a>6. 站点左边栏展示</h2><p>左侧边栏展示如何展示的，要清楚orm的查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 1.查询当前用户所有分类及分类下的文章数</span></span><br><span class="line">category_list=models.Category.objects.filter(blog=blog).annotate(count_num=Count(<span class="string">'article__pk'</span>)).values_list(<span class="string">'name'</span>,<span class="string">'count_num'</span>,<span class="string">'pk'</span>)</span><br><span class="line">    <span class="comment"># 2.查询当前用户所有标签及标签的文章数</span></span><br><span class="line">tag_list=models.Tag.objects.filter(blog=blog).annotate(count_num=Count(<span class="string">'article__pk'</span>)).values_list(<span class="string">'name'</span>,<span class="string">'count_num'</span>,<span class="string">'pk'</span>) <span class="comment"># &lt;QuerySet [('tank的标签一', 1), ('tank的标签二', 1), ('tank的标签三', 2)]&gt;</span></span><br><span class="line"><span class="comment"># 3.按照日期归档</span></span><br><span class="line">date_list=models.Article.objects.filter(blog=blog).annotate(month=TruncMonth(<span class="string">'create_time'</span>)).values(<span class="string">'month'</span>).annotate(count_num=Count(<span class="string">'pk'</span>)).values_list(<span class="string">'month'</span>,<span class="string">'count_num'</span>)</span><br></pre></td></tr></table></figure><p>这里的日期归档我们按照年月归档，但是数据库里面有年月日，我们如何把日去掉官方提供了一个方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.db.models.functions import TruncMonth</span><br><span class="line">Sales.objects</span><br><span class="line">.annotate(month&#x3D;TruncMonth(&#39;timestamp&#39;))  # Truncate to month and add to select list</span><br><span class="line">.values(&#39;month&#39;)  # Group By month</span><br><span class="line">.annotate(c&#x3D;Count(&#39;id&#39;))  # Select the count of the grouping</span><br><span class="line">.values(&#39;month&#39;, &#39;c&#39;)  # (might be redundant, haven&#39;t tested) select month and count</span><br></pre></td></tr></table></figure><p>上面的日期归档就是按照这个模式搬出来的</p><h2 id="7-侧边栏筛选功能"><a href="#7-侧边栏筛选功能" class="headerlink" title="7. 侧边栏筛选功能"></a>7. 侧边栏筛选功能</h2><ul><li>显示分类做好之后，点击文章标签、分类、日期归档统计的链接后，显示该条件下的所有文章列表</li></ul><p>博客园url设计案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://www.cnblogs.com/jason/tag/Python/    标签</span><br><span class="line">https://www.cnblogs.com/jason/category/<span class="number">850028.</span>html 分类</span><br><span class="line">https://www.cnblogs.com/jason/archive/<span class="number">2016</span>/<span class="number">10.</span>html 日期</span><br></pre></td></tr></table></figure><p><strong>规律：</strong>前面的还是站点名，后面是每个分类后的url</p><p><strong>按照这个模式设计我们的url</strong></p><ul><li>个人站点文章是我们筛选后该站点用户所有的文章，这些标签，分类都是在在上面筛选过后加条件在筛选一次</li><li>设计url，处理该url视图函数进一步过滤符合条件的文章</li><li>为了显示在一个页面，就在站点的视图里面进行筛选，这样就不要开辟页面</li><li>按照上面的url设计在每个分类的后面还有参数，点击不同的文章分类后面出现不同的url，利用每个文章分类的主键值为文章列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># url(r'^(?P&lt;username&gt;\w+)/category/(\d+)/',views.site),</span></span><br><span class="line"><span class="comment"># url(r'^(?P&lt;username&gt;\w+)/tag/(\d+)/',views.site),</span></span><br><span class="line"><span class="comment"># url(r'^(?P&lt;username&gt;\w+)/archive/(\w+)/',views.site),</span></span><br></pre></td></tr></table></figure><p>前面是匹配站点的名称，后面跟不同的分类，最后匹配主键值</p><p><strong>三句和成一句</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^(?P&lt;username&gt;\w+)/(?P&lt;condition&gt;category|tag|archive/)(?P&lt;param&gt;.*)/'</span>,views.site),</span><br></pre></td></tr></table></figure><p><strong>后端业务逻辑</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">site</span><span class="params">(request,username,**kwargs)</span>:</span></span><br><span class="line">    <span class="comment"># 先校验当前用户名的站点是否存在</span></span><br><span class="line">    user_obj = models.UserInfo.objects.filter(username=username).first()</span><br><span class="line">    <span class="comment"># 不存在404页面</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user_obj:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'error.html'</span>)</span><br><span class="line">    <span class="comment"># 先到个人站点</span></span><br><span class="line">    blog = user_obj.blog</span><br><span class="line">    <span class="comment"># 查询当前个人站点下所有的文章</span></span><br><span class="line">    article_list = models.Article.objects.filter(blog=blog)</span><br><span class="line">    <span class="keyword">if</span> kwargs:</span><br><span class="line">        <span class="comment"># print(kwargs)  # &#123;'condition': 'tag', 'param': '1'&#125;</span></span><br><span class="line">        condition = kwargs.get(<span class="string">'condition'</span>)</span><br><span class="line">        param = kwargs.get(<span class="string">'param'</span>)</span><br><span class="line">        <span class="comment"># 判断用户到底想按照哪个条件筛选数据</span></span><br><span class="line">        <span class="keyword">if</span> condition == <span class="string">'category'</span>:</span><br><span class="line">            article_list = article_list.filter(category_id=param)</span><br><span class="line">        <span class="keyword">elif</span> condition == <span class="string">'tag'</span>:</span><br><span class="line">            article_list = article_list.filter(tags__id=param)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            year, month = param.split(<span class="string">'-'</span>)</span><br><span class="line">            article_list = article_list.filter(create_time__year=year, create_time__month=month)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.查询当前用户所有分类及分类下的文章数</span></span><br><span class="line">    category_list = models.Category.objects.filter(blog=blog).annotate(count_num=Count(<span class="string">'article__pk'</span>)).values_list(<span class="string">'name'</span>,<span class="string">'count_num'</span>,<span class="string">'pk'</span>)</span><br><span class="line">    <span class="comment"># 2.查询当前用户所有标签及标签的文章数</span></span><br><span class="line">    tag_list = models.Tag.objects.filter(blog=blog).annotate(count_num=Count(<span class="string">'article__pk'</span>)).values_list(<span class="string">'name'</span>,<span class="string">'count_num'</span>,<span class="string">'pk'</span>)</span><br><span class="line">    <span class="comment"># 3.按照日期归档</span></span><br><span class="line">    date_list = models.Article.objects.filter(blog=blog).annotate(month=TruncMonth(<span class="string">'create_time'</span>)).values(<span class="string">'month'</span>).annotate(count_num=Count(<span class="string">'pk'</span>)).values_list(<span class="string">'month'</span>,<span class="string">'count_num'</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'site.html'</span>,locals())</span><br></pre></td></tr></table></figure><p>解析：<code>**kwargs</code>可能接收额外的参数，先写上去，判断kwargs是否有值，有值再进行操作，``` {‘condition’: ‘tag’, ‘param’: ‘1’}<code>我们点击标签，后面出现我们url设计好的tag，</code>1<code>是标签1的主键值，拿到之后，判断用户像按照哪个条件筛选的，</code>article_list = article_list.filter(tags__id=param)`这个在宅筛选当前站点用户所有的文章之后在进行一次条件筛选</p><p><strong>前端</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 标签 --&gt;</span><br><span class="line">&#123;% <span class="keyword">for</span> tag <span class="keyword">in</span> tag_list %&#125;</span><br><span class="line">   &lt;p&gt;&lt;a href="/&#123;&#123; username &#125;&#125;/tag/&#123;&#123; tag.pk &#125;&#125;/"&gt;&#123;&#123; tag.name &#125;&#125;(&#123;&#123;tag.c&#125;&#125;)&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 分类 --&gt;</span><br><span class="line">&#123;% <span class="keyword">for</span> category <span class="keyword">in</span> category_list %&#125;</span><br><span class="line">   &lt;p&gt;&lt;a href="/&#123;&#123;username&#125;&#125;/category/&#123;&#123; category.pk &#125;&#125;"&gt;&#123;&#123; category.name &#125;&#125;(&#123;&#123;category.c&#125;&#125;)&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 归档 --&gt;</span><br><span class="line">&#123;% <span class="keyword">for</span> archive <span class="keyword">in</span> archive_list %&#125;</span><br><span class="line">   &lt;p&gt;&lt;a href="/&#123;&#123; username &#125;&#125;/archive/&#123;&#123; archive.month|date:'Y-m' &#125;&#125;/"&gt;&#123;&#123; archive.month|date:'Y年m月' &#125;&#125;(&#123;&#123; archive.c &#125;&#125;)&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><code>//category/</code>把这些url补全，这里的主键值，我们在获取文章查询当前用户所有分类及分类的时候写上去，这样我们就可以在前端拿到主键值<code>values_list(&#39;name&#39;,&#39;count_num&#39;,&#39;pk&#39;)</code></p><h2 id="8-inclusion-tag的制作"><a href="#8-inclusion-tag的制作" class="headerlink" title="8. inclusion_tag的制作"></a>8. inclusion_tag的制作</h2><p>我们制作完站点页面之后制作文章详情页，我们可以在站点详情页上面显示文章，但是在一个页面上显示，显示的代码在后端特别的冗余，我们从新开辟一个文章详情页</p><ul><li>我们建立文章详情页之后，左侧的侧边栏就不会显示，因为我们需要站点的一些数据</li><li>该侧边栏在许多页面显示。</li><li>直接拷贝代码冗余</li></ul><p><strong>将侧边栏制作成inclusion_tag</strong></p><ul><li><p>在应用下创建一个名字必须叫templatetags文件夹</p></li><li><p>在该文件夹内创建一个任意名字的py文件</p></li><li><p>在该py文件内固定先写两汉代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line">register = template.Library()</span><br></pre></td></tr></table></figure></li></ul><p><strong>后端封装代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line"><span class="keyword">from</span> django.db.models.functions <span class="keyword">import</span> TruncMonth</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line">register = template.Library()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义inclusion_tag</span></span><br><span class="line"><span class="meta">@register.inclusion_tag('left_meun.html')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">left_meun</span><span class="params">(username)</span>:</span></span><br><span class="line">    user_obj = models.UserInfo.objects.filter(username=username).first()</span><br><span class="line">    <span class="comment"># 1.查询当前用户所有分类及分类下的文章数</span></span><br><span class="line">    blog = user_obj.blog</span><br><span class="line">    category_list = models.Category.objects.filter(blog=blog).annotate(count_num=Count(<span class="string">'article__pk'</span>)).values_list(</span><br><span class="line">        <span class="string">'name'</span>, <span class="string">'count_num'</span>, <span class="string">'pk'</span>)</span><br><span class="line">    <span class="comment"># 2.查询当前用户所有标签及标签的文章数</span></span><br><span class="line">    tag_list = models.Tag.objects.filter(blog=blog).annotate(count_num=Count(<span class="string">'article__pk'</span>)).values_list(<span class="string">'name'</span>,</span><br><span class="line">                                                                                                         <span class="string">'count_num'</span>,  </span><br><span class="line">    <span class="comment"># 3.按照日期归档</span></span><br><span class="line">    date_list = models.Article.objects.filter(blog=blog).annotate(month=TruncMonth(<span class="string">'create_time'</span>)).values(</span><br><span class="line">        <span class="string">'month'</span>).annotate(count_num=Count(<span class="string">'pk'</span>)).values_list(<span class="string">'month'</span>, <span class="string">'count_num'</span>)</span><br><span class="line">    <span class="keyword">return</span> locals()</span><br></pre></td></tr></table></figure><p><strong>前端建立一个letf_meun.html把左侧边栏的代码放在这里</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="panel panel-success"&gt;...&lt;/div&gt;</span><br><span class="line">&lt;div class="panel panel-primary"&gt;...&lt;/div&gt;</span><br><span class="line">&lt;div class="panel panel-danger"&gt;... &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在需要侧边栏的地方写如在base.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load mytag %&#125;</span><br><span class="line">&#123;% left_meun username %&#125;</span><br></pre></td></tr></table></figure><p>这样在每个页面需要左侧边栏的地方都可以显示了。这样就可以避免大量的冗余代码，也可以少些</p><h2 id="8-根评论子评论"><a href="#8-根评论子评论" class="headerlink" title="8 根评论子评论"></a>8 根评论子评论</h2><ul><li>允许根评论和子评论（评论评论的评论），可以评论自己的文章。</li><li>用户未登录不能评论且隐藏评论输入框(request.user.is_authenticated)。</li><li>评论内容有两种渲染方式：<ul><li>刷新页面时，从后端取出评论数据，前端循环展示</li><li>评论后DOM操作临时将评论内容渲染到评论列表，使用的是js的模版字符串语法。</li></ul></li><li>根评论朝后端提交的数据：文章主键、评论内容、</li><li>子评论朝后端提交的数据：文章主键、评论内容、父评论主键</li><li>获取父评论的方式：给回复按钮绑定一个自定义属性，属性值为父评论主键</li><li>区分子评论和根评论关键在于是否有父评论，这里面为了统一，提交根评论时也携带父评论（只不过值为null，因为数据库该字段支持为空）。</li></ul><p><strong>后端</strong></p><ul><li>需要登录后才能评论，所以使用一个登录校验装饰器</li><li>后端逻辑比较简单，接收评论内容、文章主键、父评论主键</li><li>评论内容为空值，响应提示信息</li><li>使用事物同时更新文章表和评论表。</li></ul><p>代码主要都在前端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//设置一个全局的parentId字段</span><br><span class="line">let parentId =null</span><br><span class="line">// 用户发表评论按钮发送ajax请求</span><br><span class="line">$(<span class="string">'#id_submit'</span>).click(function () &#123;</span><br><span class="line">    //先拿到用户评论的内容</span><br><span class="line">    let conTent = $(<span class="string">'#id_comment'</span>).val();</span><br><span class="line">    //因为子评论存的时候不应该有@人名，所以我们要手动去除@username</span><br><span class="line">    <span class="keyword">if</span> (parentId)&#123;</span><br><span class="line">        let indexNum = conTent.indexOf(<span class="string">'\n'</span>) + <span class="number">1</span>;//找到\n对应的索引。然后切片，但是骨头不顾尾要+<span class="number">1</span></span><br><span class="line">        conTent = conTent.slice(indexNum)//将indexNum之前的所有数据清楚，只保留后面的部分</span><br><span class="line">    &#125;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">'/comment/'</span>,</span><br><span class="line">        type:<span class="string">'post'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            <span class="string">'article_id'</span>:<span class="string">'&#123;&#123; article_obj.pk &#125;&#125;'</span>,</span><br><span class="line">            <span class="string">'content'</span>:conTent,</span><br><span class="line">            // 如果parentId没有值，就是null，后面数据库可以为null没任何问题</span><br><span class="line">            <span class="string">'parent_id'</span>:parentId,</span><br><span class="line">            <span class="string">'csrfmiddlewaretoken'</span>:<span class="string">'&#123;&#123; csrf_token &#125;&#125;'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        success:function (args) &#123;</span><br><span class="line">                <span class="keyword">if</span> (args.code==<span class="number">1000</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    $(<span class="string">'#error'</span>).text(args.msg)</span><br><span class="line">                    //评论框里面的内容清空</span><br><span class="line">                    $(<span class="string">'id_comment'</span>).val(<span class="string">''</span>);</span><br><span class="line">                    //临时渲染</span><br><span class="line">                    let userName=<span class="string">'&#123;&#123; request.user.username &#125;&#125;'</span>;</span><br><span class="line">                    let temp = `</span><br><span class="line">                    &lt;li class="list-group-item"&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;span&gt;$&#123;userName&#125;&lt;/span&gt;</span><br><span class="line">                        &lt;span&gt;&lt;a href="#" class="pull-right"&gt;回复&lt;/a&gt;&lt;/span&gt;</span><br><span class="line">                        &lt;div&gt;</span><br><span class="line">                            $&#123;conTent&#125;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &lt;/li&gt;</span><br><span class="line">                    `</span><br><span class="line">                    //添加到ul里面</span><br><span class="line">                    $(<span class="string">'.list-group'</span>).append(temp)</span><br><span class="line">                    //清空全局的parentId</span><br><span class="line">                    parentId = null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">//  给回复按钮绑定点击事件</span><br><span class="line">$(<span class="string">'.reply'</span>).click(function () &#123;</span><br><span class="line">    //需要评论对应的评论人姓名，还需要评论的主键值</span><br><span class="line">    //获取用户名和主键值，自定义属性</span><br><span class="line">    let commentUsername = $(this).attr(<span class="string">'username'</span>);</span><br><span class="line">    //直接修改全局</span><br><span class="line">    parentId =$(this).attr(<span class="string">'comment_id'</span>);</span><br><span class="line">    //拼接信息塞给评论框</span><br><span class="line">    $(<span class="string">'#id_comment'</span>).val(<span class="string">'@'</span>+ commentUsername + <span class="string">'\n'</span>).focus()</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>解析步骤</strong>：</p><ul><li><p>用户放松ajax请求</p></li><li><p>拿到用户评论内容</p></li><li><p>临时渲染评论框，但是只显示一个人的名字</p></li><li><p>这个时候把临时渲染的评论框加到ul里面，根评论完成</p></li><li><p>子评论给回复按钮绑定点击事件</p></li><li><p>这个时候我们要拿到对应的评论人的用户名，还有评论的id主键值</p></li><li><p>如何获取用户名和主键值，给他们自定义属性</p><p><code>&lt;span&gt;&lt;a  class=&quot;pull-right reply&quot; username=&quot;&quot; comment_id=&quot;&quot;&gt;回复&lt;/a&gt;&lt;/span&gt;</code></p></li><li><p>拼接信息给评论框</p></li><li><p>发送信息如何发送呢，设置一个全局的子评论字段，子评论的内容直接修改全局</p></li><li><p>但是我们发送的时候parentId没有值，就是null，正好数据库的parent_id字段可以为null没有任何问题</p></li><li><p>评论时存储的有@用户名，所以我们要手动去除@username</p></li><li><p>找到\n，因为我们在拼接信息的时候\n前面就是@username用户名，我们截取到\n，切片固头不顾尾+1<code>let indexNum = conTent.indexOf(&#39;\n&#39;) + 1</code></p></li><li><p>将indexNum之前的所有数据清除，保留后面的部分</p></li><li><p>这个时候我们在写根评论的时候还有子评论的主键值，要清除全局的parentId</p></li></ul><p><strong>后端</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启事务操作两种表</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comment</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 自己也能评论</span></span><br><span class="line">    <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">            back_dic = &#123;<span class="string">'code'</span>: <span class="number">1000</span>, <span class="string">'msg'</span>: <span class="string">''</span>&#125;</span><br><span class="line">            <span class="keyword">if</span> request.user.is_authenticated:</span><br><span class="line">                article_id = request.POST.get(<span class="string">'article_id'</span>)</span><br><span class="line">                content = request.POST.get(<span class="string">'content'</span>)</span><br><span class="line">                parent_id = request.POST.get(<span class="string">'parent_id'</span>)</span><br><span class="line">                <span class="comment"># 直接操作评论表存数据，两张表</span></span><br><span class="line">                <span class="keyword">with</span> transaction.atomic():</span><br><span class="line">                    models.Article. objects.filter(pk=article_id).update(comment_num=F(<span class="string">'comment_num'</span>) + <span class="number">1</span>)</span><br><span class="line">                    models.Comment.objects.create(parent_id=parent_id,user=request.user, article_id=article_id, content=content)</span><br><span class="line"></span><br><span class="line">                back_dic[<span class="string">'msg'</span>] = <span class="string">'评论成功'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                back_dic[<span class="string">'code'</span>] = <span class="number">10001</span></span><br><span class="line">                back_dic[<span class="string">'msg'</span>] = <span class="string">'用户未登录'</span></span><br><span class="line">            <span class="keyword">return</span> JsonResponse(back_dic)</span><br></pre></td></tr></table></figure><ul><li><p>我们需要操作多张表的时候可以开启事务</p></li><li><p>因为子评论可以为空，直接接收，可以省很多事情</p></li></ul><h2 id="9-beautifulsuop4"><a href="#9-beautifulsuop4" class="headerlink" title="9 beautifulsuop4"></a>9 beautifulsuop4</h2><ul><li>编辑别的博客复制在富文本编辑器，会有html页面代码，截取文本内容代码一起截取</li><li>xss攻击，如在里面使用script代码写内容，保存不显示</li><li>筛选标签去除html代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">content = request.POST.get(<span class="string">'content'</span>)</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(content, <span class="string">'html.parser'</span>) // 把要筛选的内容放进去</span><br><span class="line">tags = soup.find_all() // 找到所有标签</span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">    <span class="keyword">if</span> tag.name == <span class="string">'script'</span>: //</span><br><span class="line">    找到script标签</span><br><span class="line">    tag.decompose() // 删除标签</span><br><span class="line">desc = soup.text[<span class="number">0</span>:<span class="number">150</span>] // 截取文章描述</span><br><span class="line">article_obj = models.Article.objects.create(</span><br><span class="line">    title=title,</span><br><span class="line">    content=str(soup),</span><br><span class="line">    desc=desc,</span><br><span class="line">    category_id=category_id,</span><br><span class="line">    blog=request.user.blog</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="10-富文本编辑器遗留问题"><a href="#10-富文本编辑器遗留问题" class="headerlink" title="10 富文本编辑器遗留问题"></a>10 富文本编辑器遗留问题</h2><ul><li>在上传图片会出现下载问题</li><li>403：forbidden</li><li>自定义富文本编辑器</li></ul><p><strong>前端</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">添加参数：uploadJson:<span class="string">'/路径/'</span></span><br><span class="line">自定义参数：extraFileUploadParams : &#123;&#125;</span><br><span class="line">添加：  csrfmiddlewaretoken:<span class="string">'&#123;&#123; csrf_token &#125;&#125;'</span></span><br></pre></td></tr></table></figure><p><strong>后端：</strong></p><ul><li>获取上传的图片文件的键</li><li>拼接上传路径</li><li>返回media开放的资源路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bbs <span class="keyword">import</span> settings</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_img</span><span class="params">(request)</span>:</span></span><br><span class="line">    back_dic = &#123;<span class="string">'error'</span>:<span class="number">0</span>,<span class="string">'url'</span>:<span class="string">''</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        file_obj = request.FILES.get(<span class="string">'imgFile'</span>)//这里不知道键是多少，用request.FILES打印看一下</span><br><span class="line">        <span class="comment"># 手动拼接</span></span><br><span class="line">        file_path = os.path.join(settings.BASE_DIR,<span class="string">'media'</span>,<span class="string">'article_img'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(file_path):</span><br><span class="line">            os.mkdir(file_path)</span><br><span class="line">        file_img = os.path.join(file_path,file_obj.name)</span><br><span class="line">        <span class="keyword">with</span> open(file_img,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> file_obj:</span><br><span class="line">                f.write(i)</span><br><span class="line">        back_dic[<span class="string">'url'</span>] = <span class="string">'/media/article_img/%s'</span>%file_obj.name</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(back_dic)</span><br></pre></td></tr></table></figure><ul><li>获取键，手动拼接路径，判断是否存在文件夹，不存在创建</li><li>用<code>with open</code>保存文件</li><li>开放资源路径</li></ul><h2 id="11-修改头像问题"><a href="#11-修改头像问题" class="headerlink" title="11 修改头像问题"></a>11 修改头像问题</h2><p>修改头像出现了csrf-403-forbidden问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#id_set_avatar'</span>).click(function () &#123;</span><br><span class="line"></span><br><span class="line">   let formDataObj = new FormData();// 将普通数据和文件添加到该对象中</span><br><span class="line">   formDataObj.append(<span class="string">'avatar'</span>, $(<span class="string">'#myfile'</span>)[<span class="number">0</span>].files[<span class="number">0</span>]);</span><br><span class="line">   formDataObJ.append(<span class="string">'csrfmiddelwaretoken'</span>:<span class="string">'&#123;&#123;csrf_token&#125;&#125;'</span>)</span><br><span class="line"></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'&#123;% url '</span>set_avata<span class="string">r' %&#125;'</span>,</span><br><span class="line"></span><br><span class="line">        type: <span class="string">'post'</span>,</span><br><span class="line">        data:formDataObj,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        contentType: false,  // 必须的</span><br><span class="line">        processData: false,</span><br><span class="line">        // 必须的</span><br><span class="line">        success: function (args) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args.code===<span class="number">1000</span>)&#123;</span><br><span class="line">                window.location.href = args.url</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个是正确的书写,我在加中间件的csrf的时候</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#id_set_avatar'</span>).click(function () &#123;</span><br><span class="line"></span><br><span class="line">   let formDataObj = new FormData();// 将普通数据和文件添加到该对象中</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'&#123;% url '</span>set_avata<span class="string">r' %&#125;'</span>,</span><br><span class="line"></span><br><span class="line">        type: <span class="string">'post'</span>,</span><br><span class="line">        data:&#123;<span class="string">'avatar'</span>, $(<span class="string">'#myfile'</span>)[<span class="number">0</span>].files[<span class="number">0</span>],</span><br><span class="line">             <span class="string">'csrfmiddelwaretoken'</span>:<span class="string">'&#123;&#123;csrf_token&#125;&#125;'</span>&#125;// 因为他的数据本身就是一个对象，这样写对象套对象访问不到这个数据</span><br><span class="line">        contentType: false,  // 必须的</span><br><span class="line">        processData: false,</span><br><span class="line">        // 必须的</span><br><span class="line">        success: function (args) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args.code===<span class="number">1000</span>)&#123;</span><br><span class="line">                window.location.href = args.url</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;js只要用到内置对象，直接用new生成就可以了&lt;/p&gt;
&lt;h2 id=&quot;1-用户注册上传头像&quot;&gt;&lt;a href=&quot;#1-用户注册上传头像&quot; class=&quot;headerlink&quot; title=&quot;1. 用户注册上传头像&quot;&gt;&lt;/a&gt;1. 用户注册上传头像&lt;/h2&gt;&lt;figure 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>django-中间件笔记</title>
    <link href="http://yoursite.com/2020/07/05/django-%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/07/05/django-%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-07-05T12:37:55.673Z</published>
    <updated>2020-06-08T07:35:20.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>中间件是django 的门户，所有的请求和响应都要通过中间件</p><p>django中自带的有7个中间件，</p><h2 id="django中间件的介绍"><a href="#django中间件的介绍" class="headerlink" title="django中间件的介绍"></a>django中间件的介绍</h2><p>在django settings里面的<code>MIDDLEWARE_CLASSES</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们简单的看一下里面几个的源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        session_key = request.COOKIES.get(settings.SESSION_COOKIE_NAME)</span><br><span class="line">        request.session = self.SessionStore(session_key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CsrfViewMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        csrf_token = self._get_token(request)</span><br><span class="line">        <span class="keyword">if</span> csrf_token <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># Use same token next time.</span></span><br><span class="line">            request.META[<span class="string">'CSRF_COOKIE'</span>] = csrf_token</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._accept(request)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>我们从这两个中间件的源码可以看出，他们都有<code>process_request</code>和<code>process_response</code>两个方法，所以这个是我们需要掌握的方法，另外的三个是需要了解的<code>process_view</code>,<code>process_template_response</code>,<code>process_exception</code></p><h2 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h2><p>在一个项目或者应用名下常见一个任意的文件夹，在文件夹内常见任意名称的py文件，在该py文件内需要书写类（类要结成MiddlewareMixin）在这个里面书写自定义的五个方法，然后将类的路径已字符串的形式注册到配置文件中才能生效</p><p>首先我们在项目app01里面创建一个mymiddel文件夹，在里面创建py文件，然后自定义我们的中间件，最后注册到settings里面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMiddelware1</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'这是我的第1个中间间里面的process_reuqest'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'这是我的第1个中间件里面的process_response方法'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        print(args,kwargs)</span><br><span class="line">        print(<span class="string">'这是我的第1个中间件里面的process_view方法'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prcoess_template_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">        print(<span class="string">'这是我的第1个中间件里面的prcoess_template_response方法'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self,request,exception)</span>:</span></span><br><span class="line">        print(<span class="string">'这是我的第1个中间件里面的process_exception方法'</span>)</span><br><span class="line">        print(exception)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMiddelware2</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'这是我的第2个中间间里面的process_request'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'这是我的第2个中间件里面的process_response方法'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        print(args, kwargs)</span><br><span class="line">        print(<span class="string">'这是我的第2个中间件里面的process_view方法'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prcoess_template_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'这是我的第2个中间件里面的prcoess_template_response方法'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self, request, exception)</span>:</span></span><br><span class="line">        print(<span class="string">'这是我的第2个中间件里面的process_exception方法'</span>)</span><br><span class="line">        print(exception)</span><br></pre></td></tr></table></figure><p><strong>view视图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    print(<span class="string">'index视图函数'</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'这是index的内容'</span>)</span><br></pre></td></tr></table></figure><p><strong>答案：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">这是我的第<span class="number">1</span>个中间间里面的process_reuqest</span><br><span class="line">这是我的第<span class="number">2</span>个中间间里面的process_request</span><br><span class="line">(&lt;function index at <span class="number">0x000001571ED49AE8</span>&gt;, (), &#123;&#125;) &#123;&#125;</span><br><span class="line">这是我的第<span class="number">1</span>个中间件里面的process_view方法</span><br><span class="line">(&lt;function index at <span class="number">0x000001571ED49AE8</span>&gt;, (), &#123;&#125;) &#123;&#125;</span><br><span class="line">这是我的第<span class="number">2</span>个中间件里面的process_view方法</span><br><span class="line">index视图函数</span><br><span class="line">这是我的第<span class="number">2</span>个中间件里面的process_response方法</span><br><span class="line">这是我的第<span class="number">1</span>个中间件里面的process_response方法</span><br></pre></td></tr></table></figure><p><strong>process_request</strong></p><ul><li><p>从这里我们可以看出我们在输入url 请求的时候，都需要经过每一个中间件里面的process_request方法，他们的执行顺序是按照注册中间件的自上而下执行</p></li><li><p>没有中间件里面定义该方法，直接跳过执行下一个</p></li><li><p>如果在该方法中返回一个HttpResponse对象，请求将不再继续执行，原路返回，证明校验失败，不允许访问（截胡）</p></li><li><p>process_request方法是用来做全局相关功能的</p></li></ul><p><strong>process_response</strong></p><ul><li>响应走的时候需要每一个中间件里面的方法process_response ，里面的参数·<code>response</code> 就是django后端返回给浏览器的内容，默认返回的是形参response，也可以返回自己的</li><li>没有中间件里面定义该方法，直接跳过执行下一个</li><li>而且它返回的方式像FIFO的形式，先进先出</li></ul><p><strong>process_view</strong>(了解)</p><p><code>(&lt;function index at 0x000001571ED49AE8&gt;, (), {}) {}</code></p><ul><li>路由匹配成功之后执行视图函数之前，会自动执行中间件里面的该放法</li><li>顺序是按照配置文件中注册的中间件从上往下的顺序依次执行</li></ul><p><strong>prcoess_template_response</strong>(了解)</p><ul><li>返回的HttpResponse对象有render属性的时候才会触发</li><li>顺序是按照配置文件中注册了的中间件从下往上依次经过</li></ul><p><strong>process_exception</strong></p><ul><li>当视图函数中出现异常的情况下触发</li><li>顺序是按照配置文件中注册了的中间件从下往上依次经过</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;中间件&quot;&gt;&lt;a href=&quot;#中间件&quot; class=&quot;headerlink&quot; title=&quot;中间件&quot;&gt;&lt;/a&gt;中间件&lt;/h2&gt;&lt;p&gt;中间件是django 的门户，所有的请求和响应都要通过中间件&lt;/p&gt;
&lt;p&gt;django中自带的有7个中间件，&lt;/p&gt;
&lt;h2 id
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>基于python面向对象多人聊天室流程</title>
    <link href="http://yoursite.com/2019/09/09/%E5%9F%BA%E4%BA%8Epython%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
    <id>http://yoursite.com/2019/09/09/%E5%9F%BA%E4%BA%8Epython%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%AE%A4/</id>
    <published>2019-09-08T16:00:00.000Z</published>
    <updated>2020-07-10T09:23:13.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目环境"><a href="#项目环境" class="headerlink" title="项目环境"></a>项目环境</h2><p><img src="C:%5CUsers%5C%E5%B0%8F%E5%AD%90%5CDesktop%5C%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png" alt="未命名文件"></p><ul><li><strong>项目环境</strong><ul><li>项目名称：多人聊天室</li><li>项目模式：C/S</li><li>开发环境：win10+python3.6+pycharm</li><li>所需知识：python GUI编程，多线程编程，网络编程，数据库编程</li></ul></li></ul><h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><p>了解一下服务器扮演的角色，下面是服务器的业务流程。大致是怎样工作的</p><p><img src="C:%5CUsers%5C%E5%B0%8F%E5%AD%90%5CDesktop%5C%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6(2).png" alt=""></p><ul><li>首先服务器在指定的端口进行监听，等待客户的链接</li><li>客户端链接到服务器之后，服务器开启单线程来处理该用户的请求</li><li>处理线程等待客户端发送的请求</li><li>服务器根据客户端请求类型的不同，调用不同处理的函数</li><li>处理完客户端请求之后，再次回到第三步继续等待处理客户端新的请求</li></ul><p>客户端退出登录，服务器也会关闭对客户端的处理线程，释放资源</p><p><img src="C:%5CUsers%5C%E5%B0%8F%E5%AD%90%5CDesktop%5C%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6(3).png" alt=""></p><h2 id="响应协议设计"><a href="#响应协议设计" class="headerlink" title="响应协议设计"></a>响应协议设计</h2><p>我们都知道三次握手和四次挥手，这里呢我们约定了客户端发送什么样格式的数据给服务器，服务器又需要返回什么样格式的数据给客户端，客户端会有不同的请求，所以我们针对不同的请求个响应定义了需求个相应号，来区分不同的请求和响应</p><p>网络上一般使用json和xml格式来传输数据，但是用他们来传输，对于我们的项目有点复杂，我们的项目没有这么复杂的数据，我们采用<code>|</code>进行分割 ，然后拿到数据进行<code>split</code>一下就可以了。</p><ul><li>登录响应格式: <code>1001|ret|nickname|username</code>,其中<code>ret</code> 代表服务器端验证的结果，如果是<code>0</code>,表示服务端验证失败，后面的<code>nickname username</code> 会为空字符串，若是<code>1</code> ，表示服务端验证成功，<code>nickname</code> 为服务端返回的该用户的昵称，<code>username</code> 是该用户的用户名。</li><li>聊天的响应格式：<code>1002|nickname|message</code>, <code>nicakname</code> 是为聊天信息发送者的昵称，<code>message</code> 是发送的聊天信息</li></ul><p>下面我们定义了服务端需要的一些常量，以及为了实现客户端和服务端通信定义的一些协议编号，协议编号如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">config.py</span><br><span class="line"><span class="comment"># ----服务器相关配置----</span></span><br><span class="line">SERVER_IP = <span class="string">'127.0.0.1'</span>  <span class="comment"># 服务器IP地址</span></span><br><span class="line">SERVER_PORT = <span class="number">8090</span>  <span class="comment"># 服务器端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----数据协议相关配置----</span></span><br><span class="line">REQUEST_LOGIN = <span class="string">'0001'</span>  <span class="comment"># 登录请求</span></span><br><span class="line">REQUEST_CHAT = <span class="string">'0002'</span>  <span class="comment"># 聊天请求</span></span><br><span class="line">RESPONSE_LOGIN_RESULT = <span class="string">'1001'</span>  <span class="comment"># 登录结果响应</span></span><br><span class="line">RESPONSE_CHAT = <span class="string">'1002'</span>  <span class="comment"># 聊天响应</span></span><br><span class="line">DELIMITER = <span class="string">'|'</span>  <span class="comment"># 自定义协议数据分隔符</span></span><br></pre></td></tr></table></figure><h2 id="面向对象的思想"><a href="#面向对象的思想" class="headerlink" title="面向对象的思想"></a>面向对象的思想</h2><p><img src="C:%5CUsers%5C%E5%B0%8F%E5%AD%90%5CDesktop%5C6542225df68080716bed0ceb3e072d00.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;项目环境&quot;&gt;&lt;a href=&quot;#项目环境&quot; class=&quot;headerlink&quot; title=&quot;项目环境&quot;&gt;&lt;/a&gt;项目环境&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;C:%5CUsers%5C%E5%B0%8F%E5%AD%90%5CDesktop%5C%E6%9C%A
      
    
    </summary>
    
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>魔法方法</title>
    <link href="http://yoursite.com/2019/08/07/%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/08/07/%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/</id>
    <published>2019-08-06T16:00:00.000Z</published>
    <updated>2020-07-10T02:45:35.119Z</updated>
    
    <content type="html"><![CDATA[<h2 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h2><p>1.<code>__init__</code>类在实例化的时候会触发它的执行</p><p>2.<code>__str__</code>打印对象的时候会触发</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A(<span class="string">'张三'</span>, <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>其实打印<code>a</code> 这个对象的时候，调用的就是<code>a.__str__</code>这个方法，先找自己类里面有没有<code>__str__</code>这个方法，没有就到object去找，object里面的<code>__str__</code>一旦被调用，返回的就是这个方法的内存地址</p><p>3.<code>__repr__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def __str__(self):</span></span><br><span class="line">    <span class="comment">#     return self.name</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">a = A(<span class="string">'张三'</span>, <span class="number">24</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(str(a))</span><br><span class="line">print(repr(a))</span><br></pre></td></tr></table></figure><p><code>__repr__</code> 是<code>__str__</code>的备胎，当你注释掉<code>__str__</code>，他就会启用<code>__repr__</code>,但是当你注释掉<code>__repr__</code></p><p><code>print(repr(a))</code>打印的是object里面repr 的内存地址</p><p>4.<code>__call__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name =name </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> self.__dict__:</span><br><span class="line">            print(k,self.__dict__[k])</span><br><span class="line">a = A(<span class="string">'aax'</span>)</span><br><span class="line">a()</span><br><span class="line">a = A(<span class="string">'aax'</span>)()</span><br></pre></td></tr></table></figure><p>a()对象加一个括号就是调用<code>__call__</code></p><p>5.item系列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, sex)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(self,item):</span><br><span class="line">            <span class="keyword">return</span> self.__dict__[item]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        self.__dict__[key] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self.__dict__[key]</span><br><span class="line">f = Foo(<span class="string">'zz'</span>, <span class="string">'38'</span>, <span class="string">'男'</span>)</span><br><span class="line">print(f[<span class="string">'name'</span>])</span><br><span class="line">f[<span class="string">'hobby'</span>] = <span class="string">'base'</span></span><br><span class="line">print(f.hobby,f[<span class="string">'hobby'</span>])</span><br><span class="line">print(f.__dict__)</span><br><span class="line"><span class="keyword">del</span> f[<span class="string">'hobby'</span>] <span class="comment"># 自己实现的</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>.<span class="title">name</span> # <span class="title">object</span> 原生支持的 <span class="title">__delattr__</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(f.__dict__)</span></span></span><br></pre></td></tr></table></figure><p>以前我们查找属性 只能f.name并不能像字典那样f[‘name’],我们可以用item自定义我们自己的</p><p>6 <code>__new__</code>构造方法，创建一个对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class A:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.x &#x3D; 1</span><br><span class="line">        print(&#39;in init function&#39;)</span><br><span class="line"></span><br><span class="line">    def __new__(cls, *args, **kwargs):</span><br><span class="line">        print(&#39;in new function&#39;)</span><br><span class="line">        return object.__new__(A, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a &#x3D; A()</span><br><span class="line">print(a.x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">in new function</span><br><span class="line">in init function</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>new创建self，在我们执行new的时候还没有self，所以new只能默认传类，这个时候<code>__new__</code>也没有self，借助object.<strong>new</strong>(A, <em>args, *</em>kwargs)创建一个新的对象，return给<strong>init</strong>   self。 (<strong>new</strong>就是一个新的裸体的人，<strong>init</strong>就是穿了衣服的人)</p><p>7 <code>__eq__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,x,y)</span>:</span></span><br><span class="line">        self.x=x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.x + self.y == other.x + other.y:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">a = A(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">b = A(<span class="number">99</span>,<span class="number">33</span>)</span><br><span class="line">print(a == b)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>正常的情况是比较内存地址，我们重新定制这个eq方法会用我们定制的</p><p>8.<code>__getattr__</code>和<code>__setattr__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> type(value) <span class="keyword">is</span> str:</span><br><span class="line">            self.__dict__[key] = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'必须是字符串'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self[item]</span><br><span class="line"></span><br><span class="line">a = A(<span class="string">'123'</span>)</span><br><span class="line">a.name = <span class="number">121</span></span><br><span class="line">print(a.name)</span><br></pre></td></tr></table></figure><p><code>__getattr__</code>和<code>__setattr__</code>是 .拦截方法,不能用a[‘name’] ,对象.属性会调用<strong>setattr</strong>，当我们赋值的时候如果不是字符串它返回的是信息是必须是字符串，当我们用a.name修改属性值的时候如果不是字符串，返回的也是必须是字符串，当我们打印的时候就是123</p><p>9 上下文管理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'我在管理的时候会触发'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'xx'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        print(<span class="string">'我用完了'</span>)</span><br><span class="line">        print(<span class="string">'1'</span>,exc_type)</span><br><span class="line">        print(<span class="string">'2'</span>,exc_val)</span><br><span class="line">        print(<span class="string">'3'</span>,exc_tb)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> A() <span class="keyword">as</span> f:<span class="comment"># 触发类__enter__</span></span><br><span class="line">    print(f)</span><br><span class="line"><span class="comment"># 当管理完了，会触发__exit__</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;魔法方法&quot;&gt;&lt;a href=&quot;#魔法方法&quot; class=&quot;headerlink&quot; title=&quot;魔法方法&quot;&gt;&lt;/a&gt;魔法方法&lt;/h2&gt;&lt;p&gt;1.&lt;code&gt;__init__&lt;/code&gt;类在实例化的时候会触发它的执行&lt;/p&gt;
&lt;p&gt;2.&lt;code&gt;__str__&lt;
      
    
    </summary>
    
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>git的使用</title>
    <link href="http://yoursite.com/2019/08/07/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/08/07/git%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2019-08-06T16:00:00.000Z</published>
    <updated>2020-07-10T09:09:36.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git的使用"><a href="#git的使用" class="headerlink" title="git的使用"></a>git的使用</h2><h2 id="git和github-的区别"><a href="#git和github-的区别" class="headerlink" title="git和github 的区别"></a>git和github 的区别</h2><ul><li>Git 是一种方法。而 GitHub 只是使用这种方法的一个代码仓库，就是git是操作的，GitHub是个网址</li></ul><h2 id="初始化git仓储"><a href="#初始化git仓储" class="headerlink" title="初始化git仓储"></a>初始化git仓储</h2><p>新建一个项目project，点进目录右击选择<strong>git bash</strong></p><p><img src="C:%5CUsers%5C%E5%B0%8F%E5%AD%90%5CDesktop%5C1589027002(1).jpg" alt="1589027002(1)"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment"># 初始化仓库，这个git对我们项目的代码进行备份</span></span><br></pre></td></tr></table></figure><p><strong>配置用户名和邮箱</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="keyword">global</span>   user.name <span class="string">"xiaoming"</span> <span class="comment"># 用户名</span></span><br><span class="line"></span><br><span class="line">git config --<span class="keyword">global</span> user.email  <span class="string">"xx@sina.com"</span> <span class="comment"># 邮箱</span></span><br></pre></td></tr></table></figure><p><strong>把代码存储到 git 仓储中</strong></p><ul><li><p><strong>分两步走：</strong></p><ul><li><p>把代码放到<code>.git</code>隐藏目录的大门(暂存区)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add ./readme.md <span class="comment"># ./readme.md 文件路径要说明</span></span><br></pre></td></tr></table></figure></li><li><p>把门口的代码放入房间里面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"这是对这次添加东西的说明"</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>区域划分：</strong></p><ul><li><strong>工作区</strong>：就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区。</li><li><strong>版本库</strong>：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li><li><strong>暂存区</strong>：Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master。</li></ul><p><strong>查询当前所处的工作状态</strong>：<code>git status</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"><span class="comment"># 我们提交完了，当前的工作区是干净的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">modified:   readme.txt</span><br><span class="line"><span class="comment"># 把文件放在了暂存区</span></span><br><span class="line"></span><br><span class="line">(use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">(use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">modified:   readme.txt</span><br><span class="line"><span class="comment"># 我们的文件修改了，但是没有放到暂存区(大门口)</span></span><br></pre></td></tr></table></figure><p>如果我们修改了两个文件是不是要add两次命令呢，不需要</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add ./ <span class="comment"># 当前目录只要是修改过的文件都放到暂存区</span></span><br></pre></td></tr></table></figure><p>一次性把我们修改的代码放到房子里面去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --all -m <span class="string">"一些说明"</span></span><br></pre></td></tr></table></figure><p><strong>查看日志</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log <span class="comment"># 查看历史提交的日志</span></span><br><span class="line">git log --oneline <span class="comment"># 简洁版的日志</span></span><br></pre></td></tr></table></figure><p><strong>git 版本回退</strong></p><p>先用日志功能查看我们修改过的功能，在选择回退的版本</p><p>修改过后的版本日志</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline</span><br><span class="line">489310a (HEAD -&gt; master) 添加了js和一个功能</span><br><span class="line"><span class="number">01</span>ebf78 我们完成四个功能</span><br><span class="line"><span class="number">20e8</span>c3c 我们完成三个功能</span><br><span class="line">bc9c3b5 这次加了一个功能</span><br><span class="line"><span class="number">6</span>dad8ac 这是我的开始</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard Head~<span class="number">1</span>  <span class="comment"># 1 表示退回到上上次代码提交的状态</span></span><br><span class="line"> <span class="comment"># 0 表示上一次</span></span><br></pre></td></tr></table></figure><p>退回后的版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">01ebf78 (HEAD -&gt; master) 我们完成四个功能</span><br><span class="line"><span class="number">20e8</span>c3c 我们完成三个功能</span><br><span class="line">bc9c3b5 这次加了一个功能</span><br><span class="line"><span class="number">6</span>dad8ac 这是我的开始</span><br></pre></td></tr></table></figure><p><strong>通过版本号回退</strong><br>查看日志</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline</span><br><span class="line">489310a (HEAD -&gt; master) 添加了js和一个功能</span><br><span class="line"><span class="number">01</span>ebf78 我们完成四个功能 <span class="comment"># 01ebf78版本号</span></span><br><span class="line"><span class="number">20e8</span>c3c 我们完成三个功能 <span class="comment"># 20e8c3c版本号</span></span><br><span class="line">bc9c3b5 这次加了一个功能</span><br><span class="line"><span class="number">6</span>dad8ac 这是我的开始</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git -reset --hard <span class="number">01</span>ebf78 <span class="comment"># 精确的回退到某一次的提交状态</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">01ebf78 (HEAD -&gt; master) 我们完成四个功能</span><br><span class="line"><span class="number">20e8</span>c3c 我们完成三个功能</span><br><span class="line">bc9c3b5 这次加了一个功能</span><br><span class="line"><span class="number">6</span>dad8ac 这是我的开始</span><br></pre></td></tr></table></figure><p>假如说我们退回之后又后悔之前的操作咋办呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git -reset --hard <span class="number">01</span>ebf78 <span class="comment"># 精确的回退到某一次的提交状态</span></span><br></pre></td></tr></table></figure><p>但是如果我们把窗口关掉了，记不住版本号，又想回到以前的状态咋办呢</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog  <span class="comment"># 可以看到每一次切换的版本的记录，可以看到所有提交的版本号</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">01ebf78 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to Head~1</span><br><span class="line"><span class="number">489310</span>a HEAD@&#123;<span class="number">1</span>&#125;: commit: 添加了js和一个功能</span><br><span class="line">01ebf78 (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: 我们完成四个功能</span><br><span class="line"><span class="number">20e8</span>c3c HEAD@&#123;<span class="number">3</span>&#125;: commit: 我们完成三个功能</span><br><span class="line">bc9c3b5 HEAD@&#123;<span class="number">4</span>&#125;: commit: 这次加了一个功能</span><br><span class="line"><span class="number">6</span>dad8ac HEAD@&#123;<span class="number">5</span>&#125;: commit (initial): 这是我的开始</span><br></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p><strong>主分支：默认的是master</strong></p><p><strong>创建分支：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch dev <span class="comment"># 创建了一个dev分支 创建dev分支里面的东西和master分支的东西是一样的</span></span><br></pre></td></tr></table></figure><p><strong>切换分支：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev <span class="comment"># 切换到指定分支</span></span><br></pre></td></tr></table></figure><p><strong>查看分支：</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">$ git branch</span></span><br><span class="line"><span class="string">  dec</span></span><br><span class="line"><span class="string">  dev</span></span><br><span class="line"><span class="string">* master # 当前所在分支</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><strong>合并分支：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge dev <span class="comment"># 指定分支的名称</span></span><br></pre></td></tr></table></figure><p>比如我们我们创建分支，在分支里面已经完成了我们的功能五，但是当我们去切换到master的时候我们忘记在分支里面添加了功能五，又在master里完成了功能五，当我们去合并的时候会出现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git merge dev</span><br><span class="line">Auto-merging readme.md</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> readme.md</span><br><span class="line">Automatic merge failed; fix conflicts <span class="keyword">and</span> then commit the result.</span><br></pre></td></tr></table></figure><p>合并的时候如果有冲突，需要手动去处理，如何去处理呢，那就是要到你完成的功能里面去选择，处理完后还需要再提交一次。</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p><strong>提交代码到GitHub</strong>（当作git的服务器）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [地址] master <span class="comment">#</span></span><br></pre></td></tr></table></figure><p><strong>拿到远程的代码</strong></p><p>首先要建立一个新的仓储</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push https://github.com/zc117809/test112.git master</span><br></pre></td></tr></table></figure><p><strong>克隆</strong></p><p>要先建立一个文件，在文件里打开<strong>git bash</strong>输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zc117809/test112.git</span><br></pre></td></tr></table></figure><p>多次执行会覆盖本地的内容</p><h3 id="ssh-方式上传代码"><a href="#ssh-方式上传代码" class="headerlink" title="ssh 方式上传代码"></a>ssh 方式上传代码</h3><p>有公钥和私钥，这两个是有关联的</p><ul><li><p>生成公钥和私钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -kegen -t rsa -c <span class="string">"邮箱"</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><p>小明和小红现在同时写作开发，小红在服务器上pull到小明的数据，pull完之后，小红在html文件上做了一个功能，备份到本地，这个时候小明又更新了版本，小红又去pull这个时候会出现冲突，小红新添加的功能会和小明更新的版本上出现错乱。</p><p><strong>总结：</strong></p><ul><li>查看远程库信息，使用<code>git remote -v</code>；</li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li><li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li><li>解决完之后还要上传到服务器push</li></ul><p>当我们push时，加上-u参数，在下一次push时我们只需要写上<code>git push</code> 就能上传我们的代码(加上-u之后，git拉取当前我们分支与远程指定的分支进行关联，<code>git push origin master</code>)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git的使用&quot;&gt;&lt;a href=&quot;#git的使用&quot; class=&quot;headerlink&quot; title=&quot;git的使用&quot;&gt;&lt;/a&gt;git的使用&lt;/h2&gt;&lt;h2 id=&quot;git和github-的区别&quot;&gt;&lt;a href=&quot;#git和github-的区别&quot; class=&quot;
      
    
    </summary>
    
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>RESTful十大规范</title>
    <link href="http://yoursite.com/2018/01/04/0%20RESTful%E5%8D%81%E5%A4%A7%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2018/01/04/0%20RESTful%E5%8D%81%E5%A4%A7%E8%A7%84%E8%8C%83/</id>
    <published>2018-01-03T16:00:00.000Z</published>
    <updated>2020-08-19T12:16:28.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-什么是RESTful"><a href="#一-什么是RESTful" class="headerlink" title="一 什么是RESTful"></a>一 什么是RESTful</h2><ul><li>REST与技术无关，代表的是一种软件架构风格，REST是Representational State Transfer的简称，中文翻译为“表征状态转移”</li><li>REST从资源的角度类审视整个网络，它将分布在网络中某个节点的资源通过URL进行标识，客户端应用通过URL来获取资源的表征，获得这些表征致使这些应用转变状态</li><li>REST与技术无关，代表的是一种软件架构风格，REST是Representational State Transfer的简称，中文翻译为“表征状态转移”</li><li>所有的数据，不过是通过网络获取的还是操作（增删改查）的数据，都是资源，将一切数据视为资源是REST区别与其他架构风格的最本质属性</li><li>对于REST这种面向资源的架构风格，有人提出一种全新的结构理念，即：面向资源架构（ROA：Resource Oriented Architecture）</li></ul><h2 id="二-RESTful-API设计"><a href="#二-RESTful-API设计" class="headerlink" title="二 RESTful API设计"></a>二 RESTful API设计</h2><ul><li><p>API与用户的通信协议，总是使用[HTTPs协议]</p></li><li><p>域名 </p><ul><li><a href="https://api.example.com" target="_blank" rel="noopener">https://api.example.com</a>             尽量将API部署在专用域名（会存在跨域问题）</li><li><a href="https://example.org/api/" target="_blank" rel="noopener">https://example.org/api/</a>            API很简单</li></ul></li><li><p>版本</p><ul><li>URL，如：<a href="https://api.example.com/v1/" target="_blank" rel="noopener">https://api.example.com/v1/</a></li><li>请求头                         跨域时，引发发送多次请求</li></ul></li><li><p>路径，视网络上任何东西都是资源，均使用名词表示（可复数）</p><ul><li><a href="https://api.example.com/v1/zoos" target="_blank" rel="noopener">https://api.example.com/v1/zoos</a></li><li><a href="https://api.example.com/v1/animals" target="_blank" rel="noopener">https://api.example.com/v1/animals</a></li><li><a href="https://api.example.com/v1/employees" target="_blank" rel="noopener">https://api.example.com/v1/employees</a></li></ul></li><li><p>method</p><ul><li>GET   ：从服务器取出资源（一项或多项）</li><li>POST  ：在服务器新建一个资源</li><li>PUT   ：在服务器更新资源（客户端提供改变后的完整资源）</li><li>PATCH ：在服务器更新资源（客户端提供改变的属性）</li><li>DELETE ：从服务器删除资源</li></ul></li><li><p>过滤，通过在url上传参的形式传递搜索条件</p><ul><li><a href="https://api.example.com/v1/zoos?limit=10：指定返回记录的数量" target="_blank" rel="noopener">https://api.example.com/v1/zoos?limit=10：指定返回记录的数量</a></li><li><a href="https://api.example.com/v1/zoos?offset=10：指定返回记录的开始位置" target="_blank" rel="noopener">https://api.example.com/v1/zoos?offset=10：指定返回记录的开始位置</a></li><li><a href="https://api.example.com/v1/zoos?page=2&amp;per_page=100：指定第几页，以及每页的记录数" target="_blank" rel="noopener">https://api.example.com/v1/zoos?page=2&amp;per_page=100：指定第几页，以及每页的记录数</a></li><li><a href="https://api.example.com/v1/zoos?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序" target="_blank" rel="noopener">https://api.example.com/v1/zoos?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序</a></li><li><a href="https://api.example.com/v1/zoos?animal_type_id=1：指定筛选条件" target="_blank" rel="noopener">https://api.example.com/v1/zoos?animal_type_id=1：指定筛选条件</a></li></ul></li><li><p>状态码</p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</span><br><span class="line">201 CREATED - [POST&#x2F;PUT&#x2F;PATCH]：用户新建或修改数据成功。</span><br><span class="line">202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</span><br><span class="line">204 NO CONTENT - [DELETE]：用户删除数据成功。</span><br><span class="line">400 INVALID REQUEST - [POST&#x2F;PUT&#x2F;PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</span><br><span class="line">401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</span><br><span class="line">403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</span><br><span class="line">404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</span><br><span class="line">406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</span><br><span class="line">410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</span><br><span class="line">422 Unprocesable entity - [POST&#x2F;PUT&#x2F;PATCH] 当创建一个对象时，发生一个验证错误。</span><br><span class="line">500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</span><br><span class="line"></span><br><span class="line">更多看这里：http:&#x2F;&#x2F;www.w3.org&#x2F;Protocols&#x2F;rfc2616&#x2F;rfc2616-sec10.html</span><br></pre></td></tr></table></figure><ul><li><p>错误处理，应返回错误信息，error当做key。</p><figure class="highlight plain"><figcaption><span>``"Invalid API key"&#125;```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 返回结果，针对不同操作，服务器向用户返回的结果应该符合以下规范。</span><br><span class="line">&#96;&#96;&#96; python</span><br><span class="line">GET &#x2F;collection：返回资源对象的列表（数组）</span><br><span class="line">GET &#x2F;collection&#x2F;resource：返回单个资源对象</span><br><span class="line">POST &#x2F;collection：返回新生成的资源对象</span><br><span class="line">PUT &#x2F;collection&#x2F;resource：返回完整的资源对象</span><br><span class="line">PATCH &#x2F;collection&#x2F;resource：返回完整的资源对象</span><br><span class="line">DELETE &#x2F;collection&#x2F;resource：返回一个空文档</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Hypermedia API，RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"link"</span>: &#123;</span><br><span class="line">  <span class="string">"rel"</span>:   <span class="string">"collection https://www.example.com/zoos"</span>,</span><br><span class="line">  <span class="string">"href"</span>:  <span class="string">"https://api.example.com/zoos"</span>,</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"List of zoos"</span>,</span><br><span class="line">  <span class="string">"type"</span>:  <span class="string">"application/vnd.yourformat+json"</span></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="基于django实现"><a href="#基于django实现" class="headerlink" title="基于django实现"></a>基于django实现</h2><p>路由系统</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^users/$'</span>, views.Users.as_view()),</span><br><span class="line">    url(<span class="string">r'^users2/$'</span>, views.user2),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">user2</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">'GET'</span>:</span><br><span class="line">        dic = &#123;<span class="string">'status'</span>:<span class="number">200</span>,<span class="string">'name'</span>: <span class="string">'lqz2'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(json.dumps(dic))</span><br><span class="line">    <span class="keyword">elif</span> request.method==<span class="string">'POST'</span>:</span><br><span class="line">        dic = &#123;<span class="string">'status'</span>: <span class="number">200</span>, <span class="string">'msg'</span>: <span class="string">'修改成功'</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(dic)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Users</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        dic = &#123;<span class="string">'status'</span>:<span class="number">200</span>,<span class="string">'name'</span>: <span class="string">'lqz'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(json.dumps(dic))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        dic = &#123;<span class="string">'status'</span>: <span class="number">200</span>, <span class="string">'msg'</span>: <span class="string">'修改成功'</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(dic)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-什么是RESTful&quot;&gt;&lt;a href=&quot;#一-什么是RESTful&quot; class=&quot;headerlink&quot; title=&quot;一 什么是RESTful&quot;&gt;&lt;/a&gt;一 什么是RESTful&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;REST与技术无关，代表的是一种软件架构风格，R
      
    
    </summary>
    
    
    
      <category term="drf" scheme="http://yoursite.com/tags/drf/"/>
    
  </entry>
  
</feed>
